"""
SEO Optimizer
Otimiza√ß√£o de conte√∫do para SEO: slugs, meta tags, headings
OTIMIZADO PARA YOAST SEO - PONTUA√á√ÉO VERDE
"""

import re
import unicodedata
from typing import Dict, List, Optional, Any
from loguru import logger

class SEOOptimizer:
    """Otimizador de SEO para artigos - Compat√≠vel com Yoast SEO"""
    
    def __init__(self):
        """Inicializa o otimizador SEO"""
        # Configura√ß√µes Yoast SEO otimizadas
        self.max_meta_description_length = 155
        self.min_meta_description_length = 120
        self.max_title_length = 60
        self.min_title_length = 30
        self.max_slug_length = 50
        
        # Palavras de transi√ß√£o para melhorar legibilidade
        self.transition_words = [
            'al√©m disso', 'portanto', 'por fim', 'ou seja', 'no entanto', 
            'assim sendo', 'por outro lado', 'em primeiro lugar', 'finalmente',
            'consequentemente', 'por exemplo', 'dessa forma', 'contudo',
            'sobretudo', 'por isso', 'em suma', 'ainda assim', 'logo',
            'principalmente', 'ent√£o', 'para isso', 'entretanto', 'ainda',
            'mas', 'por√©m', 'todavia', 'assim', 'tamb√©m'
        ]
        
        # Palavras irrelevantes para slug
        self.stop_words = [
            'a', 'e', 'o', 'de', 'da', 'do', 'para', 'com', 'em', 'na', 'no',
            'por', 'at√©', 'como', 'mais', 'muito', 'sem', 'seu', 'sua', 'seus',
            'suas', 'que', 'qual', 'quando', 'onde', 'porque', 'como', 'um',
            'uma', 'uns', 'umas', 'isso', 'essa', 'esta', 'este', 'estas',
            'estes', 'ela', 'ele', 'elas', 'eles', 'ser', 'ter', 'estar'
        ]
        
        logger.info("üîç SEO Optimizer inicializado - Compat√≠vel com Yoast SEO")
    
    def optimize_article(self, article_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Otimiza artigo completo para SEO (Yoast Green Score)
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            Artigo otimizado para Yoast SEO
        """
        try:
            optimized = article_data.copy()
            
            # Extrair palavra-chave principal do t√≠tulo/produto
            primary_keyword = self._extract_primary_keyword(optimized)
            optimized['primary_keyword'] = primary_keyword
            
            # Otimizar t√≠tulo SEO (m√°x 60 chars + keyword)
            if 'titulo' in optimized:
                optimized['titulo'] = self.optimize_title_yoast(optimized['titulo'], primary_keyword)
            
            # Gerar/otimizar slug com keyword
            optimized['slug'] = self.generate_seo_slug(optimized.get('titulo', ''), primary_keyword)
            
            # Otimizar meta descri√ß√£o (120-155 chars + keyword)
            if 'meta_descricao' in optimized:
                optimized['meta_descricao'] = self.optimize_meta_description_yoast(
                    optimized['meta_descricao'], primary_keyword
                )
            elif 'conteudo' in optimized:
                optimized['meta_descricao'] = self.generate_meta_description_yoast(
                    optimized['conteudo'], primary_keyword
                )
            
            # Otimizar conte√∫do para legibilidade Yoast
            if 'conteudo' in optimized:
                optimized['conteudo'] = self.optimize_content_readability(
                    optimized['conteudo'], primary_keyword
                )
            
            # Otimizar tags
            if 'tags' in optimized:
                optimized['tags'] = self.optimize_tags_yoast(optimized['tags'], primary_keyword)
            
            # Adicionar dados estruturados
            optimized['seo_data'] = self.generate_structured_data_yoast(optimized)
            
            # Validar pontua√ß√£o Yoast
            optimized['yoast_score'] = self.calculate_yoast_score(optimized)
            
            logger.debug("‚úÖ Artigo otimizado para Yoast SEO - Pontua√ß√£o Verde")
            return optimized
            
        except Exception as e:
            logger.error(f"‚ùå Erro na otimiza√ß√£o SEO: {e}")
            return article_data
    
    def _extract_primary_keyword(self, article_data: Dict[str, Any]) -> str:
        """Extrai palavra-chave principal do artigo"""
        title = article_data.get('titulo', '')
        product_name = article_data.get('produto_nome', '')
        
        # Priorizar nome do produto
        if product_name:
            # Pegar primeiras 2-3 palavras significativas
            words = product_name.lower().split()
            keywords = [w for w in words if w not in self.stop_words and len(w) > 2]
            return ' '.join(keywords[:2]) if keywords else product_name.lower()
        
        # Fallback para t√≠tulo
        if title:
            words = title.lower().split()
            keywords = [w for w in words if w not in self.stop_words and len(w) > 2]
            return ' '.join(keywords[:2]) if keywords else title.lower()
        
        return "produto"
    
    def optimize_title_yoast(self, title: str, keyword: str) -> str:
        """
        Otimiza t√≠tulo para Yoast SEO (m√°x 60 chars + keyword)
        
        Args:
            title: T√≠tulo original
            keyword: Palavra-chave principal
            
        Returns:
            T√≠tulo otimizado para Yoast
        """
        if not title:
            return f"{keyword.title()}: Caracter√≠sticas e Benef√≠cios"
        
        # Garantir que a keyword est√° no t√≠tulo
        if keyword.lower() not in title.lower():
            # Adicionar keyword no in√≠cio se poss√≠vel
            title = f"{keyword.title()}: {title}"
        
        # Limitar a 60 caracteres
        if len(title) > self.max_title_length:
            # Tentar cortar mantendo a palavra-chave
            if keyword.lower() in title[:self.max_title_length].lower():
                # Keyword est√° na parte que ser√° mantida
                words = title.split()
                optimized_title = ""
                
                for word in words:
                    test_length = len(optimized_title + " " + word) if optimized_title else len(word)
                    if test_length <= self.max_title_length:
                        optimized_title += (" " if optimized_title else "") + word
                    else:
                        break
                
                title = optimized_title
            else:
                # Keyword n√£o est√° na parte mantida, reformular
                title = f"{keyword.title()}: {title.split(':')[-1].strip()}"
                if len(title) > self.max_title_length:
                    title = title[:self.max_title_length-3] + "..."
        
        return title.strip()
    
    def generate_seo_slug(self, text: str, keyword: str) -> str:
        """
        Gera slug otimizado com palavra-chave
        
        Args:
            text: Texto para converter em slug
            keyword: Palavra-chave principal
            
        Returns:
            Slug otimizado para SEO
        """
        if not text and not keyword:
            return "produto"
        
        # Usar keyword como base se texto n√£o dispon√≠vel
        if not text:
            text = keyword
        
        # Converter para min√∫sculas
        slug = text.lower()
        
        # Remover acentos
        slug = unicodedata.normalize('NFD', slug)
        slug = ''.join(char for char in slug if unicodedata.category(char) != 'Mn')
        
        # Substituir espa√ßos e caracteres especiais por h√≠fens
        slug = re.sub(r'[^\w\s-]', '', slug)
        slug = re.sub(r'[\s_-]+', '-', slug)
        
        # Garantir que keyword est√° no slug
        keyword_slug = re.sub(r'[^\w\s-]', '', keyword.lower())
        keyword_slug = re.sub(r'[\s_-]+', '-', keyword_slug)
        
        if keyword_slug not in slug:
            # Adicionar keyword no in√≠cio
            slug = f"{keyword_slug}-{slug}"
        
        # Remover palavras irrelevantes (mas manter keyword)
        words = slug.split('-')
        meaningful_words = []
        keyword_words = keyword_slug.split('-')
        
        for word in words:
            if word in keyword_words or (word not in self.stop_words and len(word) > 2):
                meaningful_words.append(word)
        
        if meaningful_words:
            slug = '-'.join(meaningful_words[:6])  # M√°ximo 6 palavras
        
        # Limitar tamanho
        if len(slug) > self.max_slug_length:
            words = slug.split('-')
            # Manter keyword no in√≠cio
            keyword_count = len(keyword_words)
            remaining_words = words[keyword_count:keyword_count+3]  # 3 palavras extras
            slug = '-'.join(keyword_words + remaining_words)
        
        # Limpar in√≠cio e fim
        slug = slug.strip('-')
        
        return slug or "produto"
    
    def optimize_meta_description_yoast(self, meta_desc: str, keyword: str) -> str:
        """
        Otimiza meta descri√ß√£o para Yoast (120-155 chars + keyword)
        
        Args:
            meta_desc: Meta descri√ß√£o original
            keyword: Palavra-chave principal
            
        Returns:
            Meta descri√ß√£o otimizada
        """
        if not meta_desc:
            return f"Conhe√ßa {keyword} e suas principais caracter√≠sticas. Ideal para escrit√≥rio e alta produtividade. Confira benef√≠cios e especifica√ß√µes."
        
        # Remover HTML se houver
        meta_desc = re.sub(r'<[^>]+>', '', meta_desc)
        
        # Garantir que keyword est√° presente
        if keyword.lower() not in meta_desc.lower():
            meta_desc = f"{keyword.title()}: {meta_desc}"
        
        # Ajustar tamanho (120-155 caracteres)
        if len(meta_desc) < self.min_meta_description_length:
            # Expandir com call-to-action
            cta_options = [
                " Confira caracter√≠sticas e benef√≠cios.",
                " Ideal para escrit√≥rio e empresas.",
                " Descubra especifica√ß√µes e vantagens.",
                " Saiba mais sobre funcionalidades."
            ]
            for cta in cta_options:
                if len(meta_desc + cta) <= self.max_meta_description_length:
                    meta_desc += cta
                    break
        
        elif len(meta_desc) > self.max_meta_description_length:
            # Cortar mantendo keyword
            words = meta_desc.split()
            optimized_desc = ""
            
            for word in words:
                test_length = len(optimized_desc + " " + word) if optimized_desc else len(word)
                if test_length <= self.max_meta_description_length - 3:
                    optimized_desc += (" " if optimized_desc else "") + word
                else:
                    break
            
            meta_desc = optimized_desc + "..."
        
        return meta_desc.strip()
    
    def generate_meta_description_yoast(self, content: str, keyword: str) -> str:
        """
        Gera meta descri√ß√£o otimizada a partir do conte√∫do
        
        Args:
            content: Conte√∫do HTML
            keyword: Palavra-chave principal
            
        Returns:
            Meta descri√ß√£o otimizada para Yoast
        """
        # Remover HTML
        text = re.sub(r'<[^>]+>', '', content)
        
        # Pegar primeiro par√°grafo significativo
        paragraphs = text.split('\n')
        first_paragraph = ""
        
        for paragraph in paragraphs:
            paragraph = paragraph.strip()
            if len(paragraph) > 50:  # Par√°grafo significativo
                first_paragraph = paragraph
                break
        
        if first_paragraph:
            # Usar primeiro par√°grafo como base
            meta_desc = f"{keyword.title()}: {first_paragraph[:100]}"
        else:
            # Fallback
            meta_desc = f"Conhe√ßa {keyword} e suas principais caracter√≠sticas. Ideal para escrit√≥rio e alta produtividade."
        
        return self.optimize_meta_description_yoast(meta_desc, keyword)
    
    def optimize_content_readability(self, content: str, keyword: str) -> str:
        """
        Otimiza conte√∫do para legibilidade Yoast (pontua√ß√£o verde)
        
        Args:
            content: Conte√∫do HTML
            keyword: Palavra-chave principal
            
        Returns:
            Conte√∫do otimizado para legibilidade
        """
        try:
            # USAR NOVA VERS√ÉO MELHORADA
            return self.optimize_content_readability_enhanced(content, keyword)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na otimiza√ß√£o de legibilidade: {e}")
            return content
    
    def optimize_content_readability_enhanced(self, content: str, keyword: str) -> str:
        """
        NOVA VERS√ÉO MELHORADA - Otimiza conte√∫do para legibilidade Yoast verde
        
        Args:
            content: Conte√∫do HTML/texto
            keyword: Palavra-chave principal
            
        Returns:
            Conte√∫do otimizado para Yoast verde
        """
        try:
            logger.debug("üîç Aplicando otimiza√ß√µes avan√ßadas de legibilidade Yoast...")
            
            # 1. Corrigir erros lingu√≠sticos b√°sicos
            content = self._fix_linguistic_errors_enhanced(content)
            
            # 2. Otimizar frases para m√°ximo 20 palavras
            content = self._optimize_sentence_length_enhanced(content)
            
            # 3. Adicionar palavras de transi√ß√£o (30% das frases)
            content = self._add_transition_words_enhanced(content)
            
            # 4. Otimizar listas com conte√∫do real (m√≠n. 3 itens)
            content = self._optimize_lists_enhanced(content, keyword)
            
            # 5. Garantir par√°grafos ‚â§ 100 palavras
            content = self._optimize_paragraph_length_enhanced(content)
            
            # 6. Converter para voz ativa
            content = self._improve_active_voice_enhanced(content)
            
            # 7. Garantir keyword nos primeiros 100 caracteres
            content = self._ensure_keyword_in_intro(content, keyword)
            
            logger.debug("‚úÖ Otimiza√ß√µes avan√ßadas de legibilidade aplicadas")
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Erro na otimiza√ß√£o avan√ßada: {e}")
            return content
    
    def _fix_linguistic_errors_enhanced(self, content: str) -> str:
        """Corrige erros lingu√≠sticos para Yoast verde"""
        if not content:
            return content
        
        # Corrigir mai√∫sculas desnecess√°rias (exceto in√≠cio de frases)
        corrections = [
            (r'(?<!^)(?<!\. )(?<!\n)(Al√©m Disso)', 'al√©m disso'),
            (r'(?<!^)(?<!\. )(?<!\n)(Em Um)', 'em um'),
            (r'(?<!^)(?<!\. )(?<!\n)(Em Uma)', 'em uma'),
            (r'(?<!^)(?<!\. )(?<!\n)(Por Isso)', 'por isso'),
            (r'(?<!^)(?<!\. )(?<!\n)(Por Exemplo)', 'por exemplo'),
            (r'(?<!^)(?<!\. )(?<!\n)(Dessa Forma)', 'dessa forma'),
            (r'(?<!^)(?<!\. )(?<!\n)(No Entanto)', 'no entanto'),
            (r'(?<!^)(?<!\. )(?<!\n)(Por Outro Lado)', 'por outro lado'),
            (r'(?<!^)(?<!\. )(?<!\n)(De Forma Geral)', 'de forma geral'),
            (r'(?<!^)(?<!\. )(?<!\n)(Em Compara√ß√£o)', 'em compara√ß√£o'),
            (r'(?<!^)(?<!\. )(?<!\n)(Em Resumo)', 'em resumo'),
            (r'(?<!^)(?<!\. )(?<!\n)(Ou Seja)', 'ou seja'),
        ]
        
        for pattern, replacement in corrections:
            content = re.sub(pattern, replacement, content)
        
        # Corrigir concord√¢ncia de artigos
        article_corrections = [
            (r'\bo Impressora\b', 'a Impressora'),
            (r'\bo impressora\b', 'a impressora'),
            (r'\bo multifuncional\b', 'a multifuncional'),
            (r'\bo Multifuncional\b', 'a Multifuncional'),
            (r'\ba toner\b', 'o toner'),
            (r'\ba Toner\b', 'o Toner'),
            (r'\ba papel\b', 'o papel'),
            (r'\ba Papel\b', 'o Papel'),
        ]
        
        for pattern, replacement in article_corrections:
            content = re.sub(pattern, replacement, content)
        
        return content
    
    def _optimize_sentence_length_enhanced(self, content: str) -> str:
        """Limita frases a m√°ximo 20 palavras (Yoast verde)"""
        if not content:
            return content
        
        # Trabalhar com par√°grafos
        paragraphs = content.split('\n')
        optimized_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip() or '<' in paragraph:
                optimized_paragraphs.append(paragraph)
                continue
            
            # Dividir em frases
            sentences = re.split(r'([.!?])', paragraph)
            optimized_sentences = []
            
            i = 0
            while i < len(sentences) - 1:
                sentence = sentences[i].strip()
                punctuation = sentences[i + 1] if i + 1 < len(sentences) else ''
                
                if not sentence:
                    i += 2
                    continue
                
                words = sentence.split()
                
                if len(words) > 20:
                    # Dividir frase longa
                    split_point = self._find_best_split_point(words)
                    
                    if split_point:
                        first_part = ' '.join(words[:split_point])
                        second_part = ' '.join(words[split_point:])
                        
                        # Adicionar transi√ß√£o na segunda parte
                        transitions = ['Al√©m disso', 'Dessa forma', 'Tamb√©m', 'Ainda']
                        transition = transitions[len(optimized_sentences) % len(transitions)]
                        
                        optimized_sentences.extend([first_part, '.', f' {transition}, {second_part.lower()}', punctuation])
                    else:
                        # Dividir no meio se n√£o encontrar ponto ideal
                        mid = len(words) // 2
                        first_part = ' '.join(words[:mid])
                        second_part = ' '.join(words[mid:])
                        
                        optimized_sentences.extend([first_part, '.', f' {second_part.capitalize()}', punctuation])
                else:
                    optimized_sentences.extend([sentence, punctuation])
                
                i += 2
            
            optimized_paragraphs.append(''.join(optimized_sentences))
        
        return '\n'.join(optimized_paragraphs)
    
    def _find_best_split_point(self, words: list) -> int:
        """Encontra o melhor ponto para dividir uma frase"""
        # Procurar conectivos em posi√ß√µes vi√°veis
        connectors = ['e', 'mas', 'por√©m', 'contudo', 'entretanto', 'no entanto', 
                     'que', 'porque', 'quando', 'onde', 'como', 'para que']
        
        # Procurar entre posi√ß√µes 8 e len-3
        for i in range(8, min(len(words) - 3, 20)):
            if words[i].lower() in connectors:
                return i
        
        # Se n√£o encontrou conectivo, procurar v√≠rgulas
        for i in range(8, min(len(words) - 3, 20)):
            if words[i].endswith(','):
                return i + 1
        
        return None
    
    def _add_transition_words_enhanced(self, content: str) -> str:
        """Adiciona palavras de transi√ß√£o para atingir 30% das frases"""
        import random
        
        paragraphs = content.split('\n')
        optimized_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip() or '<' in paragraph:
                optimized_paragraphs.append(paragraph)
                continue
            
            sentences = re.split(r'([.!?])', paragraph)
            sentence_pairs = []
            
            # Agrupar frases com pontua√ß√£o
            for i in range(0, len(sentences) - 1, 2):
                sentence = sentences[i].strip()
                punctuation = sentences[i + 1] if i + 1 < len(sentences) else ''
                if sentence:
                    sentence_pairs.append((sentence, punctuation))
            
            if len(sentence_pairs) <= 1:
                optimized_paragraphs.append(paragraph)
                continue
            
            # Adicionar transi√ß√µes em 30% das frases (exceto primeira)
            num_transitions = max(1, int(len(sentence_pairs) * 0.3))
            
            # Selecionar frases para modificar
            indices_to_modify = random.sample(range(1, len(sentence_pairs)), 
                                            min(num_transitions, len(sentence_pairs) - 1))
            
            optimized_sentences = []
            for i, (sentence, punct) in enumerate(sentence_pairs):
                if i in indices_to_modify:
                    # Verificar se j√° tem transi√ß√£o
                    has_transition = any(tw in sentence.lower() for tw in self.transition_words)
                    
                    if not has_transition:
                        # Escolher transi√ß√£o apropriada
                        if i == 1:
                            transition = random.choice(['Al√©m disso', 'Tamb√©m', 'Adicionalmente'])
                        elif i == len(sentence_pairs) - 1:
                            transition = random.choice(['Por fim', 'Finalmente', 'Em suma'])
                        else:
                            transition = random.choice(['Dessa forma', 'Portanto', 'Consequentemente'])
                        
                        sentence = f"{transition}, {sentence.lower()}"
                
                optimized_sentences.append(sentence + punct)
            
            optimized_paragraphs.append(' '.join(optimized_sentences))
        
        return '\n'.join(optimized_paragraphs)
    
    def _optimize_lists_enhanced(self, content: str, keyword: str) -> str:
        """Otimiza listas garantindo m√≠nimo 3 itens com conte√∫do real"""
        # Buscar listas existentes
        list_pattern = r'<ul[^>]*>(.*?)</ul>'
        
        def improve_list(match):
            list_content = match.group(1)
            items = re.findall(r'<li[^>]*>(.*?)</li>', list_content, re.DOTALL)
            
            # Limpar itens existentes
            clean_items = []
            for item in items:
                clean_text = re.sub(r'<[^>]+>', '', item).strip()
                if clean_text and len(clean_text.split()) <= 15:  # Max 15 palavras
                    clean_items.append(clean_text)
            
            # Garantir pelo menos 3 itens
            if len(clean_items) < 3:
                additional_items = self._generate_product_specific_features(keyword, 3 - len(clean_items))
                clean_items.extend(additional_items)
            
            # Reconstruir lista
            new_list = '<ul>\n'
            for item in clean_items[:6]:  # M√°ximo 6 itens
                new_list += f'    <li>{item}</li>\n'
            new_list += '</ul>'
            
            return new_list
        
        return re.sub(list_pattern, improve_list, content, flags=re.DOTALL)
    
    def _generate_product_specific_features(self, keyword: str, count: int) -> list:
        """Gera caracter√≠sticas espec√≠ficas baseadas no tipo de produto"""
        keyword_lower = keyword.lower()
        
        if 'impressora' in keyword_lower:
            features = [
                'Impress√£o r√°pida de at√© 38 p√°ginas por minuto',
                'Conectividade USB e Ethernet integrada',
                'Compatibilidade com Windows, Mac e Linux',
                'Baixo consumo de energia em standby',
                'Bandeja com capacidade para 250 folhas',
                'Resolu√ß√£o at√© 1200 x 1200 dpi'
            ]
        elif 'multifuncional' in keyword_lower:
            features = [
                'Impress√£o, c√≥pia e scan em um equipamento',
                'Scanner com resolu√ß√£o √≥ptica de 600 dpi',
                'Copiadora com zoom de 25% a 400%',
                'Conectividade Wi-Fi para uso sem fio',
                'Alimentador autom√°tico de documentos',
                'Software de digitaliza√ß√£o inclu√≠do'
            ]
        elif 'toner' in keyword_lower:
            features = [
                'Alto rendimento com at√© 2.300 p√°ginas',
                'Qualidade de impress√£o profissional',
                'Instala√ß√£o r√°pida e sem complica√ß√µes',
                'Compat√≠vel com m√∫ltiplos modelos',
                'Tinta resistente e de longa dura√ß√£o',
                'Garantia de qualidade comprovada'
            ]
        elif 'papel' in keyword_lower:
            features = [
                'Gramatura 75g/m¬≤ para impress√£o de qualidade',
                'Brancura superior para textos n√≠tidos',
                'Formato A4 padr√£o universal',
                'Papel sem √°cido para durabilidade',
                'Compat√≠vel com jato de tinta e laser',
                'Embalagem resistente √† umidade'
            ]
        else:
            features = [
                'Qualidade superior comprovada',
                'Excelente custo-benef√≠cio',
                'Garantia de satisfa√ß√£o total',
                'Compatibilidade com equipamentos modernos',
                'Instala√ß√£o e configura√ß√£o simples',
                'Design moderno e funcional'
            ]
        
        return features[:count]
    
    def _optimize_paragraph_length_enhanced(self, content: str) -> str:
        """Garante par√°grafos com m√°ximo 100 palavras"""
        paragraphs = content.split('\n')
        optimized_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip() or '<' in paragraph:
                optimized_paragraphs.append(paragraph)
                continue
            
            words = paragraph.split()
            
            if len(words) <= 100:
                optimized_paragraphs.append(paragraph)
            else:
                # Dividir par√°grafo longo
                chunks = []
                current_chunk = []
                
                for word in words:
                    current_chunk.append(word)
                    
                    if len(current_chunk) >= 85:  # Procurar ponto para quebrar
                        chunk_text = ' '.join(current_chunk)
                        last_period = chunk_text.rfind('.')
                        
                        if last_period > 50:
                            # Quebrar no ponto
                            chunks.append(chunk_text[:last_period + 1])
                            remaining = chunk_text[last_period + 1:].strip()
                            current_chunk = remaining.split() if remaining else []
                        elif len(current_chunk) >= 100:
                            # For√ßar quebra
                            chunks.append(' '.join(current_chunk))
                            current_chunk = []
                
                if current_chunk:
                    chunks.append(' '.join(current_chunk))
                
                optimized_paragraphs.extend(chunks)
        
        return '\n\n'.join(optimized_paragraphs)
    
    def _improve_active_voice_enhanced(self, content: str) -> str:
        """Converte frases passivas para ativas (melhoria Yoast)"""
        passive_to_active = [
            (r'√© oferecido por', 'oferece'),
            (r's√£o oferecidos por', 'oferecem'),
            (r'√© proporcionado por', 'proporciona'),
            (r's√£o proporcionados por', 'proporcionam'),
            (r'√© garantido por', 'garante'),
            (r's√£o garantidos por', 'garantem'),
            (r'√© recomendado', 'recomendamos'),
            (r's√£o recomendados', 'recomendamos'),
            (r'√© utilizado', 'utiliza'),
            (r's√£o utilizados', 'utilizam'),
            (r'pode ser usado', 'voc√™ pode usar'),
            (r'podem ser usados', 'voc√™ pode usar'),
            (r'ser√° beneficiado', 'voc√™ se beneficia'),
            (r'ser√£o beneficiados', 'voc√™s se beneficiam'),
            (r'foi desenvolvido', 'desenvolvemos'),
            (r'foram desenvolvidos', 'desenvolvemos'),
        ]
        
        for passive, active in passive_to_active:
            content = re.sub(passive, active, content, flags=re.IGNORECASE)
        
        return content
    
    def _ensure_keyword_in_intro(self, content: str, keyword: str) -> str:
        """Garante keyword nos primeiros 100 caracteres"""
        # Extrair primeiro par√°grafo
        first_paragraph = content.split('\n')[0] if '\n' in content else content[:200]
        
        # Verificar se keyword est√° nos primeiros 100 caracteres
        if keyword.lower() not in first_paragraph[:100].lower():
            # Criar nova introdu√ß√£o com keyword
            intro_templates = [
                f"A {keyword} √© uma solu√ß√£o essencial para quem busca qualidade e efici√™ncia.",
                f"O {keyword} oferece recursos avan√ßados e desempenho superior.",
                f"Conhe√ßa as principais caracter√≠sticas do {keyword} e seus benef√≠cios.",
            ]
            
            # Escolher template baseado no g√™nero da palavra
            if any(word in keyword.lower() for word in ['impressora', 'multifuncional']):
                new_intro = intro_templates[0]  # A
            else:
                new_intro = intro_templates[1]  # O
            
            # Inserir no in√≠cio
            if content.startswith(first_paragraph):
                content = new_intro + ' ' + content
            else:
                content = new_intro + '\n\n' + content
        
        return content
    
    def optimize_tags_yoast(self, tags: List[str], keyword: str) -> List[str]:
        """
        Otimiza tags incluindo palavra-chave
        
        Args:
            tags: Lista de tags original
            keyword: Palavra-chave principal
            
        Returns:
            Tags otimizadas
        """
        optimized_tags = list(tags) if tags else []
        
        # Garantir que keyword est√° nas tags
        keyword_variations = [
            keyword,
            keyword.replace(' ', '-'),
            keyword.split()[0] if ' ' in keyword else keyword
        ]
        
        for variation in keyword_variations:
            if not any(variation.lower() in tag.lower() for tag in optimized_tags):
                optimized_tags.insert(0, variation)  # Adicionar no in√≠cio
                break
        
        # Limitar a 8 tags para n√£o sobrecarregar
        return optimized_tags[:8]
    
    def generate_structured_data_yoast(self, article_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Gera dados estruturados compat√≠veis com Yoast
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            Dados estruturados otimizados
        """
        return {
            "@context": "https://schema.org",
            "@type": "Article",
            "headline": article_data.get('titulo', ''),
            "description": article_data.get('meta_descricao', ''),
            "author": {
                "@type": "Organization",
                "name": "Creative C√≥pias"
            },
            "publisher": {
                "@type": "Organization", 
                "name": "Creative C√≥pias",
                "url": "https://creativecopias.com.br"
            },
            "mainEntity": {
                "@type": "Product",
                "name": article_data.get('produto_nome', ''),
                "description": article_data.get('meta_descricao', ''),
                "url": article_data.get('produto_url', '')
            },
            "keywords": article_data.get('primary_keyword', '') + ', ' + ', '.join(article_data.get('tags', [])),
            "wordCount": len(re.sub(r'<[^>]+>', '', article_data.get('conteudo', '')).split()),
            "inLanguage": "pt-BR"
        }
    
    def calculate_yoast_score(self, article_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Calcula pontua√ß√£o Yoast estimada
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            Pontua√ß√µes estimadas
        """
        seo_score = 0
        readability_score = 0
        details = {
            'seo_checks': {},
            'readability_checks': {}
        }
        
        # Verifica√ß√µes SEO
        title = article_data.get('titulo', '')
        meta_desc = article_data.get('meta_descricao', '')
        content = article_data.get('conteudo', '')
        keyword = article_data.get('primary_keyword', '')
        
        # 1. Keyword no t√≠tulo
        if keyword.lower() in title.lower():
            seo_score += 20
            details['seo_checks']['keyword_in_title'] = 'green'
        else:
            details['seo_checks']['keyword_in_title'] = 'red'
        
        # 2. Comprimento do t√≠tulo
        if 30 <= len(title) <= 60:
            seo_score += 15
            details['seo_checks']['title_length'] = 'green'
        else:
            details['seo_checks']['title_length'] = 'orange' if len(title) < 70 else 'red'
        
        # 3. Meta descri√ß√£o
        if 120 <= len(meta_desc) <= 155 and keyword.lower() in meta_desc.lower():
            seo_score += 20
            details['seo_checks']['meta_description'] = 'green'
        else:
            details['seo_checks']['meta_description'] = 'orange'
        
        # 4. Keyword no conte√∫do
        content_text = re.sub(r'<[^>]+>', '', content).lower()
        keyword_count = content_text.count(keyword.lower())
        word_count = len(content_text.split())
        keyword_density = (keyword_count / word_count * 100) if word_count > 0 else 0
        
        if 0.5 <= keyword_density <= 2.5:
            seo_score += 15
            details['seo_checks']['keyword_density'] = 'green'
        else:
            details['seo_checks']['keyword_density'] = 'orange'
        
        # 5. Link externo
        if 'href=' in content and 'target="_blank"' in content:
            seo_score += 10
            details['seo_checks']['external_links'] = 'green'
        else:
            details['seo_checks']['external_links'] = 'red'
        
        # 6. Headings com keyword
        headings = re.findall(r'<h[23][^>]*>(.*?)</h[23]>', content, re.IGNORECASE)
        has_keyword_in_heading = any(keyword.lower() in heading.lower() for heading in headings)
        if has_keyword_in_heading:
            seo_score += 20
            details['seo_checks']['keyword_in_headings'] = 'green'
        else:
            details['seo_checks']['keyword_in_headings'] = 'red'
        
        # Verifica√ß√µes de Legibilidade
        sentences = re.split(r'[.!?]+', content_text)
        
        # 1. Comprimento das senten√ßas
        long_sentences = sum(1 for s in sentences if len(s.split()) > 20)
        sentence_score = max(0, 100 - (long_sentences / len(sentences) * 100))
        if sentence_score >= 75:
            readability_score += 25
            details['readability_checks']['sentence_length'] = 'green'
        else:
            details['readability_checks']['sentence_length'] = 'orange'
        
        # 2. Palavras de transi√ß√£o
        transition_count = sum(1 for tw in self.transition_words if tw in content_text)
        if transition_count >= 3:
            readability_score += 25
            details['readability_checks']['transition_words'] = 'green'
        else:
            details['readability_checks']['transition_words'] = 'orange'
        
        # 3. Voz ativa (simplificado)
        passive_markers = ['√© usado', 'foi feito', 'pode ser', 's√£o conhecidos']
        passive_count = sum(1 for marker in passive_markers if marker in content_text)
        if passive_count <= 2:
            readability_score += 25
            details['readability_checks']['passive_voice'] = 'green'
        else:
            details['readability_checks']['passive_voice'] = 'orange'
        
        # 4. Distribui√ß√£o de subt√≠tulos
        if len(headings) >= 2:
            readability_score += 25
            details['readability_checks']['subheading_distribution'] = 'green'
        else:
            details['readability_checks']['subheading_distribution'] = 'orange'
        
        return {
            'seo_score': min(100, seo_score),
            'readability_score': min(100, readability_score),
            'seo_status': 'green' if seo_score >= 70 else 'orange' if seo_score >= 50 else 'red',
            'readability_status': 'green' if readability_score >= 70 else 'orange' if readability_score >= 50 else 'red',
            'details': details
        }

    # ... resto dos m√©todos existentes ...
 
 
 
 