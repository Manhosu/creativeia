"""
Prompt Builder
Constru√ß√£o de prompts inteligentes para gera√ß√£o de conte√∫do com IA
"""

from typing import Dict, List, Optional, Any
from loguru import logger

class PromptBuilder:
    """Construtor de prompts para IA"""
    
    def __init__(self):
        """Inicializa o construtor de prompts"""
        self.base_instructions = """
        Voc√™ √© um especialista em reda√ß√£o publicit√°ria e SEO para produtos de escrit√≥rio, 
        especialmente impressoras, multifuncionais, toners e suprimentos.
        
        Seu objetivo √© criar artigos envolventes que:
        1. Sejam otimizados para SEO
        2. Tenham tom profissional mas acess√≠vel
        3. Destaquem benef√≠cios pr√°ticos
        4. Incluam call-to-action sutil
        5. Sejam √∫nicos e originais
        """
        
        self.tone_variations = {
            "profissional": {
                "style": "formal e t√©cnico",
                "voice": "autoridade no assunto",
                "approach": "dados t√©cnicos e benef√≠cios empresariais"
            },
            "vendedor": {
                "style": "persuasivo e convincente", 
                "voice": "consultivo e entusi√°stico",
                "approach": "benef√≠cios diretos e urg√™ncia"
            },
            "amig√°vel": {
                "style": "casual e acess√≠vel",
                "voice": "pr√≥ximo e prestativo", 
                "approach": "linguagem simples e exemplos pr√°ticos"
            }
        }
        
        logger.info("‚úçÔ∏è Prompt Builder inicializado")
    
    def build_prompt(self, product: Dict[str, Any], 
                    template: Dict[str, Any],
                    custom_keywords: List[str] = None,
                    custom_instructions: str = None,
                    tone: str = "profissional") -> str:
        """
        Constr√≥i prompt completo para gera√ß√£o de artigo
        
        Args:
            product: Dados do produto
            template: Template espec√≠fico para tipo de produto
            custom_keywords: Palavras-chave extras
            custom_instructions: Instru√ß√µes personalizadas
            tone: Tom do artigo
            
        Returns:
            Prompt completo para IA
        """
        try:
            # Extrair dados do produto
            nome = product.get('nome', 'Produto')
            marca = product.get('marca', '')
            preco = self._format_price(product.get('preco'))
            descricao = product.get('descricao', '')
            categoria_url = product.get('categoria_url', '')
            
            # Determinar categoria
            categoria = self._extract_category_from_url(categoria_url)
            
            # Obter configura√ß√µes de tom
            tone_config = self.tone_variations.get(tone, self.tone_variations["profissional"])
            
            # Construir se√ß√µes do prompt
            context_section = self._build_context_section(product, categoria)
            instructions_section = self._build_instructions_section(tone_config, template)
            content_requirements = self._build_content_requirements(product, custom_keywords)
            format_requirements = self._build_format_requirements()
            
            # Instru√ß√µes personalizadas
            custom_section = ""
            if custom_instructions:
                custom_section = f"\n\n## INSTRU√á√ïES PERSONALIZADAS:\n{custom_instructions}"
            
            # Montar prompt final
            prompt = f"""
{self.base_instructions}

{context_section}

{instructions_section}

{content_requirements}

{format_requirements}

{custom_section}

## DADOS DO PRODUTO:
- Nome: {nome}
- Marca: {marca if marca else 'N/A'}
- Pre√ßo: {preco}
- Descri√ß√£o: {descricao if descricao else 'N/A'}
- Categoria: {categoria}

IMPORTANTE: Retorne APENAS um JSON v√°lido com a estrutura especificada, sem texto adicional antes ou depois.
            """
            
            logger.debug(f"‚úçÔ∏è Prompt constru√≠do: {len(prompt)} caracteres")
            return prompt.strip()
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao construir prompt: {e}")
            return self._build_fallback_prompt(product)
    
    def _build_context_section(self, product: Dict[str, Any], categoria: str) -> str:
        """Constr√≥i se√ß√£o de contexto do prompt"""
        nome = product.get('nome', 'Produto')
        
        return f"""
## CONTEXTO:
Voc√™ est√° criando um artigo sobre "{nome}" para o site Creative C√≥pias, 
uma empresa especializada em solu√ß√µes para escrit√≥rio.

O p√∫blico-alvo s√£o:
- Empres√°rios e gestores de escrit√≥rio
- Profissionais liberais
- Respons√°veis por compras corporativas
- Pessoas que trabalham em home office

A categoria do produto √©: {categoria}
        """
    
    def _build_instructions_section(self, tone_config: Dict[str, str], template: Dict[str, Any]) -> str:
        """Constr√≥i se√ß√£o de instru√ß√µes baseada no tom"""
        return f"""
## INSTRU√á√ïES DE REDA√á√ÉO AVAN√áADA:

### Tom e Estilo:
- Estilo: {tone_config['style']}
- Voz: {tone_config['voice']}
- Abordagem: {tone_config['approach']}

### DIRETRIZES SEO PREMIUM:

1. **T√çTULO IRRESIST√çVEL:**
   - Comece com a palavra-chave principal
   - Use n√∫meros quando poss√≠vel ("5 Motivos", "Top 7")
   - Inclua ano atual (2025) para frescor
   - M√°ximo 60 caracteres EXATOS
   - EXEMPLOS: "HP LaserJet Pro M404n: 5 Benef√≠cios que Voc√™ Precisa Conhecer"

2. **META DESCRI√á√ÉO MAGN√âTICA:**
   - 120-155 caracteres para visualiza√ß√£o perfeita
   - Comece com verbo de a√ß√£o ("Descubra", "Conhe√ßa", "Aprenda")
   - Inclua benef√≠cio √∫nico e espec√≠fico
   - Termine com urg√™ncia ("Veja agora!", "Confira j√°!")
   - EXEMPLO: "Descubra a HP LaserJet Pro M404n: economia de 50% + velocidade profissional. Ideal para escrit√≥rios modernos. Veja j√°!"

3. **ESTRUTURA HTML T√âCNICA:**
   - **H1**: Repetir t√≠tulo exato (SEO fundamental)
   - **H2**: M√≠nimo 4 subt√≠tulos com palavras-chave
   - **H3**: Para subdivis√µes quando necess√°rio
   - **Par√°grafos**: M√°ximo 4 linhas cada
   - **Listas**: Pelo menos 2 listas (UL ou OL)
   - **Strong**: 5-8 palavras destacadas estrategicamente

4. **COPYWRITING PERSUASIVO:**
   - Use "voc√™" para conectar com o leitor
   - Inclua benef√≠cios emocionais, n√£o s√≥ t√©cnicos
   - Crie senso de urg√™ncia sutil
   - Adicione prova social quando poss√≠vel
   - Termine se√ß√µes com micro-CTAs

5. **DENSIDADE DE PALAVRA-CHAVE:**
   - Palavra-chave principal: 1-2% do texto total
   - Varia√ß√µes e sin√¥nimos espalhados naturalmente
   - Long-tail keywords nos subt√≠tulos
   - Evite keyword stuffing (nunca for√ßar)

6. **ELEMENTOS DE CONVERS√ÉO:**
   - Pain points espec√≠ficos do p√∫blico
   - Benef√≠cios √∫nicos e diferenciados
   - Compara√ß√µes sutis com concorr√™ncia
   - Caso de uso espec√≠fico e detalhado
   - Call-to-action no final

### ‚úÖ **REGRAS YOAST SEO VERDE (OBRIGAT√ìRIAS):**

        üéØ **CONTE√öDO M√çNIMO:**
        - **300+ palavras** no texto principal (sem contar HTML)
        - Artigos de produtos devem ter 350-450 palavras idealmente
        - Se necess√°rio, expanda com especifica√ß√µes t√©cnicas, compara√ß√µes, casos de uso

        üîó **LINKS OBRIGAT√ìRIOS:**
        - **1 LINK INTERNO** para Creative C√≥pias: "confira nossa sele√ß√£o completa de [categoria]"
        - **1 LINK EXTERNO** para site oficial da marca com rel="nofollow"
        - Links devem ter target="_blank" para abertura em nova aba

        üñºÔ∏è **IMAGENS:** N√£o incluir imagens autom√°ticas nos artigos

        üìù **FRASE-CHAVE (FOCUS KEYWORD):**
        - Extrair 2-3 palavras principais do nome do produto
        - EXEMPLOS: "HP LaserJet Pro" (n√£o "HP LaserJet Pro M404n Impressora Multifuncional...")
        - Usar nos primeiros 100 caracteres do texto
        - Incluir em pelo menos 1 H2
        - Densidade: 0.5-2.5% do texto total

        ‚ö° **LEGIBILIDADE YOAST:**
        - **Frases ‚â§ 20 palavras** (75% das frases)
        - **Palavras de transi√ß√£o** em 30% das frases: "al√©m disso", "portanto", "por exemplo"
        - **Par√°grafos ‚â§ 100 palavras** cada
        - **Voz ativa** predominante: "oferece" em vez de "√© oferecido"
        - **Listas com 3+ itens** reais e espec√≠ficos

        üìè **COMPRIMENTOS EXATOS:**
        - **T√≠tulo:** 30-60 caracteres (incluindo palavra-chave no in√≠cio)
        - **Meta descri√ß√£o:** 120-155 caracteres (incluindo palavra-chave no in√≠cio)
        - **Slug:** gerado automaticamente, mas otimizado

### ESTRUTURA OBRIGAT√ìRIA:

```html
<h1>[T√çTULO EXATO COM KEYWORD NO IN√çCIO]</h1>

<p>Escolha o artigo correto (A/O) baseado no produto. [PRODUTO] √© uma excelente op√ß√£o para [contexto]. [Continua√ß√£o com benef√≠cio principal]. Al√©m disso, [benef√≠cio secund√°rio]. Para mais op√ß√µes, <a href="https://blog.creativecopias.com.br/categoria/impressoras/" target="_blank">confira nossa sele√ß√£o completa de impressoras</a>. Mais informa√ß√µes t√©cnicas est√£o dispon√≠veis no <a href="[SITE_OFICIAL_MARCA]" target="_blank" rel="nofollow">site oficial da [MARCA]</a>.</p>

<h2>Principais Caracter√≠sticas do [KEYWORD]</h2>
<!-- Imagem removida conforme solicita√ß√£o -->
<ul>
    <li>[Caracter√≠stica 1 espec√≠fica]</li>
    <li>[Caracter√≠stica 2 espec√≠fica]</li>
    <li>[Caracter√≠stica 3 espec√≠fica]</li>
    <li>[Caracter√≠stica 4 espec√≠fica]</li>
</ul>
<p>[Par√°grafo explicativo ‚â§100 palavras]. Consequentemente, [resultado]. Por exemplo, [caso de uso].</p>

<h2>Ideal para Qual Ambiente de Trabalho</h2>
<p>[Descri√ß√£o espec√≠fica ‚â§100 palavras]. Portanto, [benef√≠cio]. Em primeiro lugar, [vantagem principal]. Assim, [resultado esperado].</p>

<h3>Especifica√ß√µes T√©cnicas do [KEYWORD]</h3>
<ol>
    <li>[Spec t√©cnica 1]</li>
    <li>[Spec t√©cnica 2]</li>
    <li>[Spec t√©cnica 3]</li>
</ol>

<h2>Vale a Pena Investir no [KEYWORD]?</h2>
<p>[Conclus√£o ‚â§100 palavras]. Em suma, [resumo do valor]. Finalmente, [call to action sutil].</p>
```

### ELEMENTOS T√âCNICOS AVAN√áADOS:

- **LSI Keywords**: Use sin√¥nimos naturais (impressora = equipamento, dispositivo)
- **Sem√¢ntica**: Conecte conceitos relacionados
- **User Intent**: Atenda exatamente o que o usu√°rio busca
- **Featured Snippets**: Structure para conquistar posi√ß√£o zero
- **Tempo de Leitura**: 3-5 minutos ideal (800-1200 palavras)

### EVITAR ABSOLUTAMENTE:
- Repeti√ß√£o excessiva de palavras-chave
- Promessas imposs√≠veis ou exageradas  
- Linguagem muito t√©cnica sem explica√ß√£o
- Par√°grafos longos (m√°ximo 4 linhas)
- Falta de call-to-action
- Conte√∫do gen√©rico sem personalidade

### Estrutura Recomendada:
{template.get('structure_guide', self._get_default_structure())}

### INSTRU√á√ïES CR√çTICAS PARA URLs:

**ATEN√á√ÉO - URLs DEVEM ESTAR SEMPRE CORRETAS:**
- NUNCA adicione espa√ßos em URLs
- URLs devem ser: https://blog.creativecopias.com.br/categoria/impressoras/
- JAMAIS: https://blog. creativecopias. com. br/categoria/impressoras/
- JAMAIS: https://www. hp. com/br-pt/
- SEMPRE: https://www.hp.com/br-pt/

### ESTRUTURA OBRIGAT√ìRIA:
        """
    
    def _build_content_requirements(self, product: Dict[str, Any], custom_keywords: List[str]) -> str:
        """Constr√≥i requisitos espec√≠ficos de conte√∫do"""
        nome = product.get('nome', 'Produto')
        marca = product.get('marca', '')
        
        # Palavras-chave autom√°ticas
        auto_keywords = [nome, marca] if marca else [nome]
        auto_keywords.extend(['impressora', 'escrit√≥rio', 'qualidade', 'efici√™ncia'])
        
        # Adicionar palavras-chave personalizadas
        all_keywords = auto_keywords
        if custom_keywords:
            all_keywords.extend(custom_keywords)
        
        # Remover duplicatas e vazios
        keywords = list(set([kw for kw in all_keywords if kw]))
        
        return f"""
## REQUISITOS DE CONTE√öDO:

### Palavras-chave para incluir naturalmente:
{', '.join(keywords[:10])}

### T√≥picos obrigat√≥rios:
1. Principais benef√≠cios do produto
2. Para quem √© indicado
3. Diferenciais competitivos
4. Aplica√ß√µes pr√°ticas no dia a dia

### Evitar:
- Informa√ß√µes t√©cnicas excessivamente complexas
- Promessas imposs√≠veis ou exageradas
- Repeti√ß√£o excessiva de palavras-chave
- Conte√∫do gen√©rico demais
        """
    
    def _build_format_requirements(self) -> str:
        """Constr√≥i requisitos de formata√ß√£o"""
        return """
## FORMATO DE RESPOSTA OBRIGAT√ìRIO:

Retorne um JSON v√°lido com exatamente esta estrutura:

{
    "titulo": "T√≠tulo chamativo e otimizado para SEO (m√°ximo 60 caracteres)",
    "meta_descricao": "Descri√ß√£o para mecanismos de busca (m√°ximo 155 caracteres)",
    "conteudo": "Conte√∫do HTML do artigo com tags <h1>, <h2>, <h3>, <p>, <ul>, <li>, <strong>",
    "tags": ["tag1", "tag2", "tag3", "tag4", "tag5", "tag6"]
}

### REQUISITOS SEO PREMIUM:

**T√≠tulo (CRUCIAL para SEO):**
- M√ÅXIMO 60 caracteres (incluindo espa√ßos)
- Incluir palavra-chave principal NO IN√çCIO
- Usar n√∫meros quando poss√≠vel ("5 Motivos", "Top 10")
- Incluir termos como "Melhor", "2025", "Guia Completo"
- Ser clic√°vel e criar curiosidade
- EXEMPLOS: "HP LaserJet Pro: 5 Motivos para Escolher em 2025"

**Meta Descri√ß√£o (FUNDAMENTAL):**
- M√ÅXIMO 155 caracteres precisos
- Incluir palavra-chave principal
- Incluir call-to-action ("Descubra", "Conhe√ßa", "Veja")
- Mencionar benef√≠cio √∫nico
- Usar urg√™ncia sutil ("Agora", "Hoje")
- EXEMPLO: "Descubra a HP LaserJet Pro M404n: economia de at√© 50% em impress√µes. Ideal para escrit√≥rios modernos. Veja agora!"

**Conte√∫do HTML SUPER OTIMIZADO:**

ESTRUTURA OBRIGAT√ìRIA:
1. <h1>T√≠tulo Principal</h1> (repetir o t√≠tulo)
2. Par√°grafo introdut√≥rio (150-200 palavras) com palavra-chave nos primeiros 100 caracteres
3. <h2>Por que Escolher [PRODUTO]? Os 5 Principais Motivos</h2>
4. Lista <ul> com 5-6 benef√≠cios √∫nicos
5. <h2>Caracter√≠sticas T√©cnicas que Fazem a Diferen√ßa</h2>
6. Tabela ou lista detalhada
7. <h2>Para Quem √© Indicado o [PRODUTO]?</h2>
8. Par√°grafos com casos de uso espec√≠ficos
9. <h2>Comparativo: [PRODUTO] vs Concorr√™ncia</h2>
10. <h2>Como Instalar e Configurar [PRODUTO]</h2>
11. <h2>Pre√ßo e Onde Comprar [PRODUTO]</h2>
12. Conclus√£o com CTA forte

**ELEMENTOS SEO AVAN√áADOS:**
- Usar <strong> nas palavras-chave importantes
- Densidade de palavra-chave: 1-2% (n√£o mais!)
- Incluir varia√ß√µes da palavra-chave (sin√¥nimos)
- Usar LSI keywords (palavras relacionadas)
- Par√°grafos de 2-4 linhas m√°ximo
- Listas numeradas e com bullets
- M√≠nimo 500 palavras, ideal 800-1200
- Incluir pre√ßo quando dispon√≠vel
- Mencionar marca nos subt√≠tulos

**Tags/Palavras-chave:**
- M√çNIMO 5, M√ÅXIMO 8 tags
- Incluir: palavra-chave principal, marca, categoria, benef√≠cio principal
- Usar long-tail keywords
- Incluir varia√ß√µes regionais
- EXEMPLO: ["hp laserjet pro", "impressora escritorio", "hp impressora", "impressora laser", "multifuncional hp", "impressora empresarial"]

**DENSIDADE E FREQU√äNCIA:**
- Palavra-chave principal: aparecer em t√≠tulo, primeiro par√°grafo, 2-3 subt√≠tulos
- Sin√¥nimos e varia√ß√µes espalhados naturalmente
- N√£o repetir a mesma palavra-chave excessivamente
- Usar conectivos e transi√ß√µes naturais
        """
    
    def _get_default_structure(self) -> str:
        """Estrutura padr√£o para artigos"""
        return """
1. Introdu√ß√£o atrativa (1 par√°grafo)
2. Principais benef√≠cios (H2 + lista ou par√°grafos)
3. Para quem √© indicado (H2 + par√°grafo)
4. Diferenciais t√©cnicos (H2 + lista)
5. Conclus√£o com call-to-action (1 par√°grafo)
        """
    
    def _extract_category_from_url(self, url: str) -> str:
        """Extrai categoria da URL"""
        if not url:
            return "produtos para escrit√≥rio"
        
        category_mapping = {
            'impressoras': 'impressoras',
            'multifuncionais': 'multifuncionais',
            'toner': 'toners e cartuchos',
            'papel': 'pap√©is e materiais',
            'scanner': 'scanners',
            'copiadora': 'copiadoras'
        }
        
        url_lower = url.lower()
        for key, category in category_mapping.items():
            if key in url_lower:
                return category
        
        return "produtos para escrit√≥rio"
    
    def _format_price(self, price_data: Any) -> str:
        """Formata dados de pre√ßo"""
        if not price_data:
            return "Consulte o pre√ßo"
        
        if isinstance(price_data, dict):
            return price_data.get('texto', 'Consulte o pre√ßo')
        elif isinstance(price_data, str):
            return price_data
        else:
            return str(price_data)
    
    def _build_fallback_prompt(self, product: Dict[str, Any]) -> str:
        """Prompt de fallback em caso de erro"""
        nome = product.get('nome', 'Produto')
        
        return f"""
Crie um artigo sobre "{nome}" no formato JSON:

{{
    "titulo": "T√≠tulo para {nome}",
    "meta_descricao": "Descri√ß√£o do {nome}",
    "conteudo": "<h2>Sobre o {nome}</h2><p>Conte√∫do do artigo...</p>",
    "tags": ["tag1", "tag2", "tag3"]
}}

Use tom profissional e foque nos benef√≠cios para empresas.
        """
    
    def get_template_prompts(self) -> Dict[str, str]:
        """Retorna prompts espec√≠ficos por tipo de produto"""
        return {
            "impressora": """
            Foque em: qualidade de impress√£o, velocidade, economia de tinta/toner,
            facilidade de uso, conectividade, adequa√ß√£o para volume de impress√£o.
            """,
            
            "multifuncional": """
            Destaque: versatilidade (imprimir, copiar, escanear), economia de espa√ßo,
            recursos de conectividade, qualidade de digitaliza√ß√£o, facilidade de opera√ß√£o.
            """,
            
            "toner": """
            Enfatize: rendimento, qualidade de impress√£o, compatibilidade,
            custo-benef√≠cio, facilidade de instala√ß√£o, garantia.
            """,
            
            "produto_generico": """
            Destaque: benef√≠cios principais, aplica√ß√µes pr√°ticas,
            diferenciais competitivos, adequa√ß√£o ao ambiente corporativo.
            """
        } 
 
 
 
 