"""
Content Generator
Gerador principal de conte√∫do SEO com IA para produtos
OTIMIZADO PARA YOAST LEGIBILIDADE - PONTUA√á√ÉO VERDE
"""

import os
import json
import re
from typing import Dict, List, Optional, Any
from datetime import datetime
from loguru import logger
import random

try:
    from openai import OpenAI
except ImportError:
    logger.warning("‚ö†Ô∏è OpenAI n√£o instalada. Rodando em modo simula√ß√£o.")
    OpenAI = None

from .prompt_builder import PromptBuilder
from .seo_optimizer import SEOOptimizer
from .template_manager import TemplateManager
from .product_database import ProductDatabase

class ContentGenerator:
    """Gerador principal de conte√∫do SEO com IA"""
    
    def __init__(self, api_key: str = None, model: str = None, temperature: float = 0.7, max_tokens: int = 2000):
        """
        Inicializa o gerador de conte√∫do
        
        Args:
            api_key: Chave da API OpenAI (ou usa vari√°vel de ambiente)
            model: Modelo da OpenAI a usar
            temperature: Criatividade da IA (0.0 a 1.0)
            max_tokens: M√°ximo de tokens na resposta
        """
        # Configurar API OpenAI
        self.api_key = api_key or os.getenv('OPENAI_API_KEY')
        
        # Usar modelo da vari√°vel de ambiente ou padr√£o
        self.model = model or os.getenv('OPENAI_MODEL', 'gpt-4o-mini')
        
        # FOR√áAR USO DA API REAL (desabilitar simula√ß√£o)
        # Usu√°rio confirmou que adicionou a API key
        self.simulation_mode = False
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente.")
            logger.info("üîß Tentando usar API key fornecida diretamente ou configurada manualmente...")
            # Ainda assim, vamos tentar usar a API real
            self.simulation_mode = False
        
        # Sempre tentar inicializar o cliente OpenAI
        try:
            self.client = OpenAI(api_key=self.api_key)
            logger.info("‚úÖ Cliente OpenAI inicializado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar cliente OpenAI: {e}")
            logger.warning("üé≠ Voltando para modo simula√ß√£o como fallback")
            self.simulation_mode = True
        
        self.temperature = temperature
        self.max_tokens = max_tokens
        
        # Inicializar componentes
        self.prompt_builder = PromptBuilder()
        self.seo_optimizer = SEOOptimizer()
        self.template_manager = TemplateManager()
        self.product_database = ProductDatabase()  # NOVO: Base de produtos variados
        
        # Palavras de transi√ß√£o para legibilidade Yoast
        self.transition_words = [
            'al√©m disso', 'portanto', 'por fim', 'ou seja', 'no entanto', 
            'assim sendo', 'por outro lado', 'em primeiro lugar', 'finalmente',
            'consequentemente', 'por exemplo', 'dessa forma', 'contudo',
            'sobretudo', 'por isso', 'em suma', 'ainda assim', 'logo',
            'principalmente', 'ent√£o', 'para isso', 'entretanto', 'ainda',
            'de forma geral', 'em compara√ß√£o', 'em resumo', 'adicionalmente'
        ]
        
        # Configurar logging
        logger.add(
            "logs/generator.log",
            rotation="1 week",
            retention="30 days",
            level="INFO",
            format="{time} | {level} | {message}"
        )
        
        logger.info("ü§ñ Content Generator inicializado - Otimizado para Yoast Legibilidade")
        logger.info(f"üìù Modelo: {self.model} | Temperatura: {self.temperature} | Max Tokens: {self.max_tokens}")
        logger.info(f"üîß Modo: {'Simula√ß√£o' if self.simulation_mode else 'OpenAI API'}")
        
        # Log da base de produtos
        stats = self.product_database.get_statistics()
        logger.info(f"üì¶ {stats['total_produtos']} produtos dispon√≠veis: {stats['por_marca']}")
    
    def generate_article(self, product: Dict[str, Any], 
                        custom_keywords: List[str] = None,
                        custom_instructions: str = None,
                        tone: str = "profissional") -> Dict[str, Any]:
        """
        Gera artigo completo para um produto
        
        Args:
            product: Dados do produto extra√≠do pelo scraper
            custom_keywords: Palavras-chave extras
            custom_instructions: Instru√ß√µes personalizadas
            tone: Tom do artigo (profissional, vendedor, amig√°vel)
            
        Returns:
            Dicion√°rio com artigo gerado
        """
        try:
            logger.info(f"ü§ñ Iniciando gera√ß√£o de artigo para: {product.get('nome', 'Produto Desconhecido')}")
            
            # Validar produto
            if not self._validate_product(product):
                logger.error("‚ùå Produto inv√°lido para gera√ß√£o de conte√∫do")
                return {}
            
            # Determinar categoria/tipo do produto
            product_type = self._determine_product_type(product)
            logger.debug(f"üìÇ Tipo do produto identificado: {product_type}")
            
            # Obter template baseado no tipo
            template = self.template_manager.get_template(product_type)
            
            # Construir prompt
            prompt = self.prompt_builder.build_prompt(
                product=product,
                template=template,
                custom_keywords=custom_keywords,
                custom_instructions=custom_instructions,
                tone=tone
            )
            
            # Gerar conte√∫do com IA
            if self.simulation_mode:
                ai_content = self._generate_simulated_content(product, template)
            else:
                ai_content = self._generate_ai_content(prompt)
                
                # Se falhou na API, usar simula√ß√£o como fallback
                if not ai_content:
                    logger.warning("üé≠ API falhou, usando conte√∫do simulado como fallback")
                    ai_content = self._generate_simulated_content(product, template)
            
            if not ai_content:
                logger.error("‚ùå Falha na gera√ß√£o de conte√∫do")
                return {}
            
            # Processar e estruturar resposta
            article_data = self._process_ai_response(ai_content, product)
            
            # NOVA OTIMIZA√á√ÉO: Aplicar melhorias de legibilidade Yoast
            article_data = self._optimize_readability_yoast(article_data)
            
            # Otimizar SEO
            article_data = self.seo_optimizer.optimize_article(article_data)
            
            # Adicionar metadados
            article_data.update({
                'produto_id': product.get('id'),
                'produto_nome': product.get('nome'),
                'produto_url': product.get('url'),
                'data_geracao': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'tipo_produto': product_type,
                'tom_usado': tone,
                'modelo_ia': self.model,
                'status': 'gerado'
            })
            
            logger.info(f"‚úÖ Artigo gerado com sucesso: {len(article_data.get('conteudo', ''))} caracteres")
            return article_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o do artigo: {e}")
            return {}
    
    def _optimize_readability_yoast(self, article_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Aplica todas as otimiza√ß√µes de legibilidade para Yoast verde
        
        Args:
            article_data: Dados do artigo
            
        Returns:
            Artigo otimizado para legibilidade Yoast
        """
        try:
            logger.debug("üîç Aplicando otimiza√ß√µes de legibilidade Yoast...")
            
            optimized = article_data.copy()
            
            # Otimizar conte√∫do principal
            if 'conteudo' in optimized:
                content = optimized['conteudo']
                
                # CRITICO 1: Garantir conte√∫do m√≠nimo de 300 palavras
                content = self._ensure_minimum_content_length(content, optimized.get('produto_nome', ''))
                
                # CRITICO 2: Adicionar links internos obrigat√≥rios
                content = self._add_mandatory_internal_links(content)
                
                # CRITICO 3: Garantir links externos obrigat√≥rios
                content = self._ensure_external_links(content, optimized.get('produto_nome', ''))
                
                # CRITICO 4: Adicionar imagens com ALT contendo keyword
                content = self._add_images_with_keyword_alt(content, optimized.get('produto_nome', ''))
                
                # CRITICO 5: Garantir focus keyword no primeiro par√°grafo
                content = self._ensure_keyword_in_first_paragraph(content, optimized.get('produto_nome', ''))
                
                # CRITICO 6: Limpar URLs malformadas (espa√ßos extras)
                content = self._clean_urls_in_content(content)
                
                # Aplicar otimiza√ß√µes de legibilidade existentes
                content = self._optimize_sentence_length_yoast(content)
                content = self._fix_unnecessary_capitals(content)
                content = self._fix_article_gender_agreement(content)
                content = self._add_transition_words_yoast(content)
                content = self._optimize_lists_yoast(content, optimized.get('produto_nome', ''))
                content = self._optimize_paragraph_length_yoast(content)
                content = self._convert_to_active_voice(content)
                
                optimized['conteudo'] = content
            
            # Otimizar t√≠tulo
            if 'titulo' in optimized:
                optimized['titulo'] = self._optimize_title_for_yoast_green(optimized['titulo'], optimized.get('produto_nome', ''))
            
            # Otimizar meta description
            if 'meta_descricao' in optimized:
                optimized['meta_descricao'] = self._optimize_meta_for_yoast_green(optimized['meta_descricao'], optimized.get('produto_nome', ''))
            
            # Gerar focus keyword otimizada - USAR PRODUTO_NOME CORRETO
            product_name = optimized.get('produto_nome', '')
            if not product_name:
                # Se produto_nome n√£o existe, tentar outras fontes
                product_name = optimized.get('nome', '') or optimized.get('title', '') or optimized.get('titulo', '')
            
            optimized['focus_keyword'] = self._generate_focus_keyword_yoast(product_name)
            
            logger.debug("‚úÖ Otimiza√ß√µes de legibilidade Yoast aplicadas")
            return optimized
            
        except Exception as e:
            logger.error(f"‚ùå Erro na otimiza√ß√£o Yoast: {e}")
            return article_data
    
    def _ensure_minimum_content_length(self, content: str, product_name: str) -> str:
        """
        Garante que o conte√∫do tenha pelo menos 300 palavras
        
        Args:
            content: Conte√∫do HTML
            product_name: Nome do produto
            
        Returns:
            Conte√∫do expandido se necess√°rio
        """
        # Contar palavras no texto (sem HTML)
        text_only = re.sub(r'<[^>]+>', '', content)
        word_count = len(text_only.split())
        
        if word_count < 300:
            # Adicionar conte√∫do extra para atingir 300+ palavras
            additional_content = self._generate_additional_content(product_name, 300 - word_count)
            
            # Inserir antes da conclus√£o ou no final
            if '</h2>' in content:
                # Encontrar √∫ltima se√ß√£o e adicionar antes
                parts = content.rsplit('</h2>', 1)
                if len(parts) == 2:
                    content = parts[0] + '</h2>' + additional_content + parts[1]
                else:
                    content += additional_content
        
        return content

    def _generate_additional_content(self, product_name: str, words_needed: int) -> str:
        """Gera conte√∫do adicional para atingir contagem m√≠nima"""
        sections = [
            f"""
            <h3>Vantagens do {product_name} para Seu Escrit√≥rio</h3>
            <p>O {product_name} oferece benef√≠cios espec√≠ficos para ambientes profissionais. Al√©m disso, sua 
            tecnologia avan√ßada garante produtividade constante. Portanto, √© uma escolha inteligente para 
            empresas que buscam efici√™ncia. Em primeiro lugar, destaca-se pela confiabilidade operacional.</p>
            """,
            f"""
            <h3>Especifica√ß√µes T√©cnicas Detalhadas</h3>
            <ul>
                <li>Tecnologia de impress√£o laser de alta precis√£o</li>
                <li>Velocidade otimizada para volumes m√©dios e altos</li>
                <li>Conectividade USB e rede Ethernet</li>
                <li>Compatibilidade universal com sistemas Windows e Mac</li>
                <li>Ciclo de trabalho mensal robusto</li>
            </ul>
            <p>Essas caracter√≠sticas t√©cnicas fazem do {product_name} uma solu√ß√£o completa. Consequentemente, 
            atende √†s demandas mais exigentes do mercado corporativo.</p>
            """,
            f"""
            <h3>Comparativo com Concorrentes</h3>
            <p>Em compara√ß√£o com outros modelos do mercado, o {product_name} se destaca. Por exemplo, 
            oferece melhor custo-benef√≠cio na categoria. Tamb√©m apresenta menor consumo energ√©tico. 
            Finalmente, sua manuten√ß√£o √© mais simples e econ√¥mica.</p>
            """
        ]
        
        # Selecionar se√ß√µes baseado nas palavras necess√°rias
        result = ""
        for section in sections:
            result += section
            section_words = len(re.sub(r'<[^>]+>', '', section).split())
            words_needed -= section_words
            if words_needed <= 0:
                break
        
        return result

    def _add_mandatory_internal_links(self, content: str) -> str:
        """
        Adiciona pelo menos 1 link interno obrigat√≥rio
        
        Args:
            content: Conte√∫do HTML
            
        Returns:
            Conte√∫do com link interno
        """
        # Verificar se j√° tem link interno
        if 'blog.creativecopias.com.br' in content or 'creativecopias.com.br' in content:
            return content
        
        # Links internos para adicionar
        internal_links = [
            'confira nossa <a href="https://blog.creativecopias.com.br/categoria/impressoras/" target="_blank">sele√ß√£o completa de impressoras</a>',
            'veja tamb√©m nossos <a href="https://blog.creativecopias.com.br/categoria/multifuncionais/" target="_blank">equipamentos multifuncionais</a>',
            'encontre <a href="https://blog.creativecopias.com.br/categoria/suprimentos/" target="_blank">suprimentos originais</a>',
            '<a href="https://blog.creativecopias.com.br/contato/" target="_blank">entre em contato conosco</a> para mais informa√ß√µes'
        ]
        
        link_to_add = random.choice(internal_links)
        
        # Inserir no primeiro par√°grafo que tenha conte√∫do suficiente
        paragraphs = re.findall(r'<p>(.*?)</p>', content, re.DOTALL)
        if paragraphs:
            for i, paragraph in enumerate(paragraphs):
                if len(paragraph.split()) > 15:  # Par√°grafo com conte√∫do suficiente
                    # Adicionar link no final do par√°grafo
                    enhanced_p = paragraph.rstrip() + f'. Para mais op√ß√µes, {link_to_add}.'
                    content = content.replace(f'<p>{paragraph}</p>', f'<p>{enhanced_p}</p>', 1)
                    break
        else:
            # Se n√£o encontrar par√°grafos, adicionar no final
            content += f'<p>Para mais op√ß√µes, {link_to_add}.</p>'
        
        return content

    def _ensure_external_links(self, content: str, product_name: str) -> str:
        """
        Garante pelo menos 1 link externo obrigat√≥rio
        
        Args:
            content: Conte√∫do HTML
            product_name: Nome do produto
            
        Returns:
            Conte√∫do com link externo
        """
        # Verificar se j√° tem link externo n√£o Creative C√≥pias
        external_links_present = re.findall(r'href="(https?://[^"]+)"', content)
        has_external = any(link for link in external_links_present if 'creativecopias.com' not in link)
        
        if has_external:
            return content
        
        # Determinar link externo baseado na marca
        brand_links = {
            'hp': 'https://www.hp.com/br-pt/',
            'canon': 'https://www.canon.com.br/',
            'epson': 'https://epson.com.br/',
            'brother': 'https://www.brother.com.br/',
            'samsung': 'https://www.samsung.com/br/',
            'xerox': 'https://www.xerox.com.br/'
        }
        
        # Detectar marca no nome do produto
        brand = 'hp'  # Default
        for brand_name in brand_links.keys():
            if brand_name.lower() in product_name.lower():
                brand = brand_name
                break
        
        external_link = f'<a href="{brand_links[brand]}" target="_blank" rel="nofollow">site oficial da {brand.upper()}</a>'
        
        # Inserir no segundo par√°grafo se dispon√≠vel
        paragraphs = re.findall(r'<p>(.*?)</p>', content, re.DOTALL)
        if len(paragraphs) >= 2 and len(paragraphs[1].split()) > 10:
            # Adicionar no final do segundo par√°grafo
            second_p = paragraphs[1]
            enhanced_p = second_p.rstrip() + f' Mais detalhes t√©cnicos est√£o dispon√≠veis no {external_link}.'
            content = content.replace(f'<p>{second_p}</p>', f'<p>{enhanced_p}</p>', 1)
        elif paragraphs and len(paragraphs[0].split()) > 10:
            # Se s√≥ tem um par√°grafo, adicionar nele
            first_p = paragraphs[0]
            enhanced_p = first_p.rstrip() + f' Consulte tamb√©m o {external_link} para informa√ß√µes adicionais.'
            content = content.replace(f'<p>{first_p}</p>', f'<p>{enhanced_p}</p>', 1)
        else:
            # Se n√£o encontrar par√°grafos adequados, adicionar no final
            content += f'<p>Consulte o {external_link} para mais informa√ß√µes t√©cnicas.</p>'
        
        return content

    def _add_images_with_keyword_alt(self, content: str, product_name: str) -> str:
        """
        Adiciona pelo menos 1 imagem com ALT contendo a keyword
        
        Args:
            content: Conte√∫do HTML
            product_name: Nome do produto (keyword)
            
        Returns:
            Conte√∫do com imagem e ALT otimizado
        """
        # REMOVIDO: L√≥gica de imagens autom√°ticas (conforme solicitado pelo usu√°rio)
        # N√£o adicionar nem modificar imagens automaticamente
        return content

    def _ensure_keyword_in_first_paragraph(self, content: str, product_name: str) -> str:
        """
        Garante que a keyword aparece no primeiro par√°grafo (primeiros 100 caracteres)
        
        Args:
            content: Conte√∫do HTML
            product_name: Nome do produto
            
        Returns:
            Conte√∫do com keyword no in√≠cio
        """
        keyword = self._extract_keyword_from_product(product_name)
        
        # Encontrar primeiro par√°grafo
        first_p_match = re.search(r'<p>(.*?)</p>', content, re.DOTALL)
        if first_p_match:
            first_p = first_p_match.group(1).strip()
            
            # Verificar se keyword j√° est√° nos primeiros 100 caracteres
            first_100 = first_p[:100].lower()
            if keyword.lower() not in first_100:
                # Reformular primeira frase para incluir keyword com link de compra
                sentences = first_p.split('. ')
                if sentences:
                    # Corrigir o artigo baseado no tipo de produto
                    if any(word in product_name.lower() for word in ['impressora', 'multifuncional', 'copiadora']):
                        article = "A"
                    else:
                        article = "O"
                    
                    # Gerar link de compra do produto
                    product_slug = re.sub(r'[^a-z0-9]+', '-', product_name.lower()).strip('-')
                    buy_link = f'<a href="https://creativecopias.com.br/produto/{product_slug}" target="_blank" rel="noopener"><strong>Comprar {product_name}</strong></a>'
                    
                    # VALIDA√á√ÉO CR√çTICA: Verificar se product_name n√£o est√° vazio
                    if not product_name or product_name.strip() == "":
                        product_name = "equipamento"
                    if len(product_name.strip()) < 3:
                        product_name = "equipamento multifuncional"
                    
                    new_first_sentence = f"{article} {product_name} √© uma excelente op√ß√£o para quem busca qualidade e desempenho"
                    if len(sentences) > 1:
                        enhanced_p = new_first_sentence + '. ' + '. '.join(sentences[1:]) + f' Para adquirir este produto, acesse: {buy_link}.'
                    else:
                        enhanced_p = new_first_sentence + '. ' + sentences[0] + f' Para comprar, acesse: {buy_link}.'
                    
                    content = content.replace(f'<p>{first_p}</p>', f'<p>{enhanced_p}</p>', 1)
        
        return content

    def _optimize_title_for_yoast_green(self, title: str, product_name: str) -> str:
        """
        Otimiza t√≠tulo para Yoast VERDE (30-60 chars + keyword no in√≠cio)
        
        Args:
            title: T√≠tulo original
            product_name: Nome do produto
            
        Returns:
            T√≠tulo otimizado para Yoast verde
        """
        keyword = self._extract_keyword_from_product(product_name)
        
        # Usar o produto completo no t√≠tulo, n√£o s√≥ keyword
        if not title.lower().startswith(product_name.lower()[:20]):  # Primeiras palavras do produto
            title = f"{product_name}: {title}"
        
        # Ajustar para 30-60 caracteres
        if len(title) < 30:
            # Muito curto, expandir
            title = f"{product_name}: An√°lise e Review Completo"
        elif len(title) > 60:
            # Muito longo, cortar mantendo produto
            if ':' in title:
                parts = title.split(':', 1)
                remaining_chars = 60 - len(parts[0]) - 2  # -2 para ': '
                if remaining_chars > 10:
                    title = f"{parts[0]}: {parts[1].strip()[:remaining_chars]}"
                else:
                    title = parts[0][:57] + "..."
            else:
                title = title[:57] + "..."
        
        return title.strip()

    def _optimize_meta_for_yoast_green(self, meta_desc: str, product_name: str) -> str:
        """
        Otimiza meta description para Yoast VERDE (120-155 chars + keyword)
        
        Args:
            meta_desc: Meta description original
            product_name: Nome do produto
            
        Returns:
            Meta description otimizada
        """
        keyword = self._extract_keyword_from_product(product_name)
        
        # Usar produto completo, mas limitar tamanho
        product_short = product_name[:30] if len(product_name) > 30 else product_name
        
        # Garantir que produto est√° no in√≠cio
        if not meta_desc.lower().startswith(product_short.lower()):
            meta_desc = f"{product_short}: {meta_desc}"
        
        # Ajustar para 120-155 caracteres
        if len(meta_desc) < 120:
            # Muito curta, expandir
            meta_desc = f"{product_short}: an√°lise completa, especifica√ß√µes t√©cnicas, pre√ßos e onde comprar. Confira review detalhado e avalia√ß√£o."
        elif len(meta_desc) > 155:
            # Muito longa, cortar mantendo produto
            meta_desc = meta_desc[:152] + "..."
        
        return meta_desc.strip()

    def _generate_focus_keyword_yoast(self, product_name: str) -> str:
        """
        Gera focus keyword otimizada para Yoast
        
        Args:
            product_name: Nome do produto
            
        Returns:
            Focus keyword otimizada
        """
        return self._extract_keyword_from_product(product_name)

    def _extract_keyword_from_product(self, product_name: str) -> str:
        """
        Extrai keyword principal do nome do produto
        
        Args:
            product_name: Nome completo do produto
            
        Returns:
            Keyword otimizada (2-3 palavras principais)
        """
        if not product_name:
            return "produto"
        
        # Limpar espa√ßos e converter para min√∫sculas
        clean_name = product_name.strip().lower()
        
        # Para produtos HP LaserJet, extrair marca + modelo espec√≠fico
        if 'hp' in clean_name and 'laserjet' in clean_name:
            # Extrair modelo espec√≠fico (ex: M404n, M404dn, etc.)
            import re
            model_match = re.search(r'(m\d+\w*)', clean_name)
            if model_match:
                return f"hp laserjet {model_match.group(1)}"
            else:
                return 'hp laserjet'
        
        # Para outros produtos, extrair palavras significativas
        words = clean_name.split()
        
        # Remover palavras irrelevantes
        stop_words = ['a', 'o', 'de', 'da', 'do', 'com', 'para', 'em', 'na', 'no', 'impressora', 'multifuncional']
        significant_words = []
        
        for word in words:
            if (word not in stop_words and 
                len(word) > 2 and 
                not word.isdigit() and 
                word.isalpha()):  # Apenas palavras, n√£o n√∫meros/s√≠mbolos
                significant_words.append(word)
        
        # Retornar 2 palavras principais
        if len(significant_words) >= 2:
            return ' '.join(significant_words[:2])
        elif significant_words:
            # Se s√≥ tem uma palavra significativa, tentar pegar do produto completo
            # Priorizar marca + primeira palavra t√©cnica
            if 'hp' in words:
                tech_words = [w for w in words if w not in stop_words and w != 'hp' and len(w) > 3]
                if tech_words:
                    return f"hp {tech_words[0]}"
                else:
                    return 'hp impressora'
            return significant_words[0]
        else:
            # √öltimo fallback: extrair primeiras palavras do nome original
            first_words = product_name.split()[:2]
            return ' '.join(first_words).lower()
    
    def _optimize_sentence_length_yoast(self, content: str) -> str:
        """Limita frases a m√°ximo 20 palavras para Yoast verde"""
        if not content:
            return content
        
        # Dividir em par√°grafos
        paragraphs = content.split('\n')
        optimized_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip():
                optimized_paragraphs.append(paragraph)
                continue
            
            # Dividir em frases
            sentences = re.split(r'[.!?]+', paragraph)
            optimized_sentences = []
            
            for sentence in sentences:
                sentence = sentence.strip()
                if not sentence:
                    continue
                
                words = sentence.split()
                
                # Se a frase tem mais de 20 palavras, dividir
                if len(words) > 20:
                    # Tentar dividir em conjun√ß√µes
                    connectors = ['e', 'mas', 'por√©m', 'contudo', 'entretanto', 'no entanto', 'todavia']
                    
                    for i, word in enumerate(words):
                        if word.lower() in connectors and i > 8 and i < len(words) - 3:
                            # Dividir aqui
                            first_part = ' '.join(words[:i])
                            second_part = ' '.join(words[i+1:])
                            
                            # Adicionar palavra de transi√ß√£o na segunda parte
                            transition = random.choice(['Al√©m disso', 'Dessa forma', 'Tamb√©m'])
                            second_part = f"{transition}, {second_part.lower()}"
                            
                            optimized_sentences.append(first_part + '.')
                            optimized_sentences.append(second_part + '.')
                            break
                    else:
                        # Se n√£o conseguir dividir naturalmente, cortar em 20 palavras
                        first_part = ' '.join(words[:20])
                        remaining = ' '.join(words[20:])
                        
                        optimized_sentences.append(first_part + '.')
                        if remaining:
                            transition = random.choice(['Al√©m disso', 'Tamb√©m', 'Ainda'])
                            optimized_sentences.append(f"{transition}, {remaining.lower()}.")
                else:
                    optimized_sentences.append(sentence + '.')
            
            optimized_paragraphs.append(' '.join(optimized_sentences))
        
        return '\n'.join(optimized_paragraphs)
    
    def _fix_unnecessary_capitals(self, content: str) -> str:
        """Corrige mai√∫sculas desnecess√°rias no meio de frases"""
        if not content:
            return content
        
        # Padr√µes a corrigir
        patterns = [
            (r'\b(Al√©m Disso)\b', 'Al√©m disso'),
            (r'\b(Em Um)\b', 'Em um'),
            (r'\b(Em Uma)\b', 'Em uma'),
            (r'\b(Por Isso)\b', 'Por isso'),
            (r'\b(Por Exemplo)\b', 'Por exemplo'),
            (r'\b(Dessa Forma)\b', 'Dessa forma'),
            (r'\b(No Entanto)\b', 'No entanto'),
            (r'\b(Por Outro Lado)\b', 'Por outro lado'),
            (r'\b(De Forma Geral)\b', 'De forma geral'),
            (r'\b(Em Compara√ß√£o)\b', 'Em compara√ß√£o'),
            (r'\b(Em Resumo)\b', 'Em resumo'),
            (r'\b(Ou Seja)\b', 'Ou seja'),
            (r'\b(Assim Sendo)\b', 'Assim sendo'),
        ]
        
        # Aplicar corre√ß√µes (exceto no in√≠cio de frases)
        for pattern, replacement in patterns:
            # N√£o corrigir se estiver no in√≠cio de uma frase (ap√≥s ponto/quebra de linha)
            content = re.sub(f'(?<!^)(?<!\. )(?<!\n){pattern}', replacement, content)
        
        return content
    
    def _fix_article_gender_agreement(self, content: str) -> str:
        """Corrige concord√¢ncia de artigos com substantivos"""
        if not content:
            return content
        
        # Corre√ß√µes espec√≠ficas comuns
        corrections = [
            (r'\bo Impressora\b', 'a Impressora'),
            (r'\bo impressora\b', 'a impressora'),
            (r'\bo multifuncional\b', 'a multifuncional'),
            (r'\bo Multifuncional\b', 'a Multifuncional'),
            (r'\bo escaner\b', 'o scanner'),
            (r'\bo Escaner\b', 'o Scanner'),
            (r'\ba toner\b', 'o toner'),
            (r'\ba Toner\b', 'o Toner'),
            (r'\ba papel\b', 'o papel'),
            (r'\ba Papel\b', 'o Papel'),
        ]
        
        for pattern, replacement in corrections:
            content = re.sub(pattern, replacement, content)
        
        return content
    
    def _add_transition_words_yoast(self, content: str) -> str:
        """Adiciona palavras de transi√ß√£o para atingir 30% das frases (Yoast verde)"""
        if not content:
            return content
        
        paragraphs = content.split('\n')
        optimized_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip() or '<' in paragraph:  # Pular par√°grafos vazios ou HTML
                optimized_paragraphs.append(paragraph)
                continue
            
            sentences = re.split(r'[.!?]+', paragraph)
            sentences = [s.strip() for s in sentences if s.strip()]
            
            if len(sentences) <= 1:
                optimized_paragraphs.append(paragraph)
                continue
            
            # Adicionar transi√ß√µes em 30% das frases (exceto a primeira)
            transition_count = max(1, int(len(sentences) * 0.3))
            
            # Selecionar frases aleat√≥rias para adicionar transi√ß√µes (exceto a primeira)
            sentences_to_modify = random.sample(range(1, len(sentences)), min(transition_count, len(sentences)-1))
            
            for i in sentences_to_modify:
                sentence = sentences[i]
                
                # Verificar se j√° tem palavra de transi√ß√£o
                has_transition = any(trans in sentence.lower() for trans in self.transition_words)
                
                if not has_transition:
                    # Escolher transi√ß√£o baseada na posi√ß√£o
                    if i == 1:
                        transition = random.choice(['Al√©m disso', 'Tamb√©m', 'Adicionalmente'])
                    elif i == len(sentences) - 1:
                        transition = random.choice(['Por fim', 'Finalmente', 'Em suma'])
                    else:
                        transition = random.choice(['Dessa forma', 'Portanto', 'Consequentemente', 'Ainda assim'])
                    
                    # Adicionar transi√ß√£o
                    sentences[i] = f"{transition}, {sentence.lower()}"
            
            optimized_paragraphs.append('. '.join(sentences) + '.')
        
        return '\n'.join(optimized_paragraphs)
    
    def _optimize_lists_yoast(self, content: str, product_name: str) -> str:
        """Otimiza listas com pelo menos 3 bullets e conte√∫do real"""
        if not content:
            return content
        
        # Buscar listas existentes e melhor√°-las
        list_pattern = r'<ul>(.*?)</ul>'
        
        def improve_list(match):
            list_content = match.group(1)
            items = re.findall(r'<li>(.*?)</li>', list_content)
            
            if len(items) < 3:
                # Adicionar mais itens baseado no tipo de produto
                if 'impressora' in product_name.lower():
                    additional_items = [
                        'Conectividade USB e Ethernet integrada',
                        'Baixo consumo de energia em modo standby',
                        'Compatibilidade com sistemas Windows e Mac'
                    ]
                elif 'multifuncional' in product_name.lower():
                    additional_items = [
                        'Scanner com resolu√ß√£o √≥ptica superior',
                        'Copiadora com zoom autom√°tico',
                        'Fax com mem√≥ria de documentos'
                    ]
                elif 'toner' in product_name.lower():
                    additional_items = [
                        'Alto rendimento de p√°ginas por cartucho',
                        'Qualidade de impress√£o profissional',
                        'Instala√ß√£o r√°pida e sem complica√ß√µes'
                    ]
                else:
                    additional_items = [
                        'Qualidade superior comprovada',
                        'Excelente custo-benef√≠cio',
                        'Garantia de satisfa√ß√£o'
                    ]
                
                # Adicionar itens at√© ter pelo menos 3
                needed = 3 - len(items)
                items.extend(additional_items[:needed])
            
            # Garantir que cada item tem m√°ximo 15 palavras
            optimized_items = []
            for item in items:
                words = item.split()
                if len(words) > 15:
                    item = ' '.join(words[:15]) + '...'
                optimized_items.append(item)
            
            # Reconstruir lista
            new_list = '<ul>\n'
            for item in optimized_items:
                new_list += f'   <li>{item}</li>\n'
            new_list += '</ul>'
            
            return new_list
        
        content = re.sub(list_pattern, improve_list, content, flags=re.DOTALL)
        
        return content
    
    def _optimize_paragraph_length_yoast(self, content: str) -> str:
        """Garante que par√°grafos tenham m√°ximo 100 palavras"""
        if not content:
            return content
        
        paragraphs = content.split('\n')
        optimized_paragraphs = []
        
        for paragraph in paragraphs:
            if not paragraph.strip() or '<' in paragraph:  # Pular vazios ou HTML
                optimized_paragraphs.append(paragraph)
                continue
            
            words = paragraph.split()
            
            if len(words) <= 100:
                optimized_paragraphs.append(paragraph)
            else:
                # Dividir em par√°grafos menores
                chunks = []
                current_chunk = []
                
                for word in words:
                    current_chunk.append(word)
                    
                    if len(current_chunk) >= 90:
                        # Procurar ponto para quebrar
                        chunk_text = ' '.join(current_chunk)
                        last_period = chunk_text.rfind('.')
                        
                        if last_period > 50:  # Se encontrou um ponto em posi√ß√£o razo√°vel
                            chunks.append(chunk_text[:last_period + 1])
                            remaining = chunk_text[last_period + 1:].strip()
                            current_chunk = remaining.split() if remaining else []
                        elif len(current_chunk) >= 100:
                            # For√ßar quebra se n√£o encontrou ponto
                            chunks.append(' '.join(current_chunk))
                            current_chunk = []
                
                if current_chunk:
                    chunks.append(' '.join(current_chunk))
                
                optimized_paragraphs.extend(chunks)
        
        return '\n\n'.join(optimized_paragraphs)
    
    def _convert_to_active_voice(self, content: str) -> str:
        """Converte frases para voz ativa quando poss√≠vel"""
        if not content:
            return content
        
        # Padr√µes de voz passiva para ativa
        patterns = [
            (r'√© oferecido', 'oferece'),
            (r's√£o oferecidos', 'oferecem'),
            (r'√© proporcionado', 'proporciona'),
            (r's√£o proporcionados', 'proporcionam'),
            (r'√© garantido', 'garante'),
            (r's√£o garantidos', 'garantem'),
            (r'√© recomendado', 'recomendamos'),
            (r's√£o recomendados', 'recomendamos'),
            (r'√© utilizado', 'utiliza'),
            (r's√£o utilizados', 'utilizam'),
            (r'√© considerado', 'consideramos'),
            (r's√£o considerados', 'consideramos'),
            (r'pode ser usado', 'voc√™ pode usar'),
            (r'podem ser usados', 'voc√™ pode usar'),
            (r'ser√° beneficiado', 'voc√™ se beneficia'),
            (r'ser√£o beneficiados', 'voc√™s se beneficiam'),
        ]
        
        for passive, active in patterns:
            content = re.sub(passive, active, content, flags=re.IGNORECASE)
        
        return content
    
    def _optimize_title_length_yoast(self, title: str) -> str:
        """Otimiza t√≠tulo para m√°ximo 60 caracteres"""
        if not title or len(title) <= 60:
            return title
        
        # Tentar cortar mantendo palavras completas
        words = title.split()
        optimized = ""
        
        for word in words:
            test_length = len(optimized + " " + word) if optimized else len(word)
            if test_length <= 57:  # Deixar espa√ßo para pontua√ß√£o
                optimized += (" " if optimized else "") + word
            else:
                break
        
        return optimized
    
    def _optimize_meta_description_length_yoast(self, meta_desc: str) -> str:
        """Otimiza meta descri√ß√£o para 120-155 caracteres"""
        if not meta_desc:
            return meta_desc
        
        if len(meta_desc) < 120:
            # Muito curta, adicionar mais informa√ß√£o
            meta_desc += " Confira caracter√≠sticas, benef√≠cios e onde comprar."
        
        if len(meta_desc) > 155:
            # Muito longa, cortar mantendo palavras completas
            words = meta_desc.split()
            optimized = ""
            
            for word in words:
                test_length = len(optimized + " " + word) if optimized else len(word)
                if test_length <= 152:  # Deixar espa√ßo para pontua√ß√£o
                    optimized += (" " if optimized else "") + word
                else:
                    break
            
            meta_desc = optimized + "..."
        
        return meta_desc
    
    def generate_articles_batch(self, products: List[Dict[str, Any]], 
                               **kwargs) -> List[Dict[str, Any]]:
        """
        Gera artigos para m√∫ltiplos produtos
        
        Args:
            products: Lista de produtos
            **kwargs: Argumentos para generate_article
            
        Returns:
            Lista de artigos gerados
        """
        logger.info(f"üîÑ Iniciando gera√ß√£o em lote de {len(products)} artigos")
        
        articles = []
        for i, product in enumerate(products, 1):
            try:
                logger.info(f"üìù Gerando artigo {i}/{len(products)}")
                
                article = self.generate_article(product, **kwargs)
                if article:
                    articles.append(article)
                else:
                    logger.warning(f"‚ö†Ô∏è Falha na gera√ß√£o do artigo {i}")
                
                # Delay entre gera√ß√µes para n√£o sobrecarregar API
                if not self.simulation_mode and i < len(products):
                    import time
                    time.sleep(2)
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no artigo {i}: {e}")
                continue
        
        success_rate = len(articles) / len(products) * 100 if products else 0
        logger.info(f"‚úÖ Gera√ß√£o em lote conclu√≠da: {len(articles)}/{len(products)} artigos ({success_rate:.1f}%)")
        
        return articles
    
    def _validate_product(self, product: Dict[str, Any]) -> bool:
        """Valida se produto tem dados suficientes para gerar conte√∫do"""
        required_fields = ['nome']
        return all(product.get(field) for field in required_fields)
    
    def _determine_product_type(self, product: Dict[str, Any]) -> str:
        """Determina o tipo/categoria do produto baseado nos dados"""
        nome = product.get('nome', '').lower()
        descricao = product.get('descricao', '').lower()
        text = f"{nome} {descricao}"
        
        # Mapeamento de palavras-chave para tipos
        type_keywords = {
            'impressora': ['impressora', 'printer'],
            'multifuncional': ['multifuncional', 'multifun', 'all-in-one'],
            'toner': ['toner', 'cartucho'],
            'papel': ['papel', 'resma'],
            'scanner': ['scanner', 'digitalizador'],
            'copiadora': ['copiadora', 'copier'],
            'fax': ['fax'],
            'suprimento': ['suprimento', 'supply']
        }
        
        for product_type, keywords in type_keywords.items():
            if any(keyword in text for keyword in keywords):
                return product_type
        
        return 'produto_generico'
    
    def _generate_ai_content(self, prompt: str) -> Optional[str]:
        """Gera conte√∫do usando OpenAI API"""
        try:
            logger.info("ü§ñ Enviando prompt para OpenAI...")
            logger.debug(f"üìù Modelo: {self.model}, Temperatura: {self.temperature}, Max Tokens: {self.max_tokens}")
            
            if not self.client:
                logger.error("‚ùå Cliente OpenAI n√£o inicializado!")
                return None
            
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "Voc√™ √© um especialista em reda√ß√£o publicit√°ria e SEO para produtos de escrit√≥rio, especialmente impressoras e suprimentos."},
                    {"role": "user", "content": prompt}
                ],
                temperature=self.temperature,
                max_tokens=self.max_tokens
            )
            
            content = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ Resposta da OpenAI recebida: {len(content)} caracteres")
            logger.debug(f"üìÑ Conte√∫do: {content[:200]}...")
            
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Erro na API OpenAI: {type(e).__name__}: {e}")
            logger.debug(f"üîç Detalhes do erro: {str(e)}")
            
            # Se der erro, usar fallback
            logger.warning("üé≠ Usando conte√∫do simulado como fallback")
            return None
    
    def _generate_simulated_content(self, product: Dict[str, Any], template: Dict[str, Any]) -> str:
        """Gera conte√∫do simulado para testes (quando API n√£o dispon√≠vel)"""
        nome = product.get('nome', 'Produto')
        marca = product.get('marca', 'Marca')
        preco = product.get('preco', {})
        preco_texto = preco.get('texto', 'Consulte o pre√ßo') if isinstance(preco, dict) else str(preco)
        
        # VARIA√á√ïES DE T√çTULOS PARA EVITAR DUPLICATAS
        title_variations = [
            f"{nome}: An√°lise Completa 2025",
            f"{nome}: Guia de Compra Definitivo",
            f"{nome}: Vale a Pena? Review Detalhado",
            f"{nome}: Caracter√≠sticas e Benef√≠cios",
            f"Review: {nome} - Pr√≥s e Contras",
            f"Como Escolher: {nome}",
            f"Tudo Sobre o {nome}",
            f"{nome}: Especifica√ß√µes T√©cnicas",
            f"An√°lise: {nome} da {marca}",
            f"{nome}: Melhor Custo-Benef√≠cio?"
        ]
        
        # Escolher t√≠tulo aleat√≥rio
        titulo_seo = random.choice(title_variations)
        
        # VARIA√á√ïES DE META DESCRI√á√ÉO
        meta_variations = [
            f"Descubra tudo sobre o {nome}: an√°lise completa, especifica√ß√µes t√©cnicas e onde comprar com melhor pre√ßo.",
            f"Review detalhado do {nome}: caracter√≠sticas, benef√≠cios e compara√ß√£o com concorrentes. Confira!",
            f"Guia completo do {nome}: vale a pena? An√°lise de pr√≥s, contras e custo-benef√≠cio.",
            f"Conhe√ßa o {nome}: especifica√ß√µes, pre√ßos e avalia√ß√£o especializada. Tudo que voc√™ precisa saber.",
            f"An√°lise t√©cnica do {nome}: performance, qualidade e comparativo de pre√ßos no mercado."
        ]
        
        meta_desc = random.choice(meta_variations)
        
        # VARIA√á√ïES DE ESTRUTURA DE CONTE√öDO
        content_structures = [
            # Estrutura 1: Foco em benef√≠cios
            f"""<h1>{titulo_seo}</h1>
            
            <h2>Por que escolher o {nome}?</h2>
            <p>O {nome} da {marca} se destaca no mercado por oferecer uma combina√ß√£o √∫nica de qualidade, performance e custo-benef√≠cio. Com tecnologia avan√ßada e design moderno, este produto atende √†s necessidades de usu√°rios exigentes.</p>
            
            <h2>Principais Caracter√≠sticas</h2>
            <ul>
                <li><strong>Tecnologia Avan√ßada:</strong> Equipado com os mais modernos recursos</li>
                <li><strong>Design Ergon√¥mico:</strong> Pensado para m√°ximo conforto de uso</li>
                <li><strong>Efici√™ncia Energ√©tica:</strong> Consumo otimizado e sustent√°vel</li>
                <li><strong>Conectividade:</strong> M√∫ltiplas op√ß√µes de conex√£o</li>
                <li><strong>Durabilidade:</strong> Constru√ß√£o robusta para uso intensivo</li>
            </ul>
            
            <h2>Benef√≠cios para o Usu√°rio</h2>
            <p>Ao escolher o {nome}, voc√™ investe em produtividade e qualidade. Este equipamento oferece resultados superiores, reduzindo custos operacionais e aumentando a efici√™ncia do trabalho.</p>
            
            <h3>Economia Garantida</h3>
            <p>Com tecnologia de ponta, o {nome} proporciona economia de at√© 40% nos custos operacionais, tornando-se um investimento inteligente para empresas e usu√°rios dom√©sticos.</p>
            
            <h2>Onde Comprar</h2>
            <p>O {nome} est√° dispon√≠vel nas principais lojas especializadas. Pre√ßo atual: {preco_texto}. Aproveite as condi√ß√µes especiais e garante j√° o seu!</p>""",
            
            # Estrutura 2: Foco t√©cnico
            f"""<h1>{titulo_seo}</h1>
            
            <h2>Especifica√ß√µes T√©cnicas do {nome}</h2>
            <p>O {nome} representa o que h√° de mais moderno em tecnologia. Desenvolvido pela {marca}, este produto incorpora inova√ß√µes que garantem performance superior e confiabilidade.</p>
            
            <h2>Recursos Avan√ßados</h2>
            <h3>Tecnologia de Ponta</h3>
            <p>Equipado com processamento avan√ßado e componentes de alta qualidade, o {nome} oferece desempenho excepcional em todas as condi√ß√µes de uso.</p>
            
            <h3>Conectividade Inteligente</h3>
            <ul>
                <li>Conex√£o Wi-Fi integrada</li>
                <li>Compatibilidade universal</li>
                <li>Interface intuitiva</li>
                <li>Configura√ß√£o simplificada</li>
            </ul>
            
            <h2>Performance e Qualidade</h2>
            <p>Com velocidade otimizada e qualidade superior, o {nome} atende √†s demandas mais exigentes do mercado profissional e dom√©stico.</p>
            
            <h3>Sustentabilidade</h3>
            <p>Desenvolvido com foco na sustentabilidade, o {nome} utiliza tecnologias eco-friendly que reduzem o impacto ambiental sem comprometer a performance.</p>
            
            <h2>Investimento Inteligente</h2>
            <p>Por {preco_texto}, o {nome} oferece excelente custo-benef√≠cio, combinando tecnologia avan√ßada com pre√ßo competitivo.</p>""",
            
            # Estrutura 3: Foco comparativo
            f"""<h1>{titulo_seo}</h1>
            
            <h2>O {nome} √© a Melhor Escolha?</h2>
            <p>Em um mercado competitivo, o {nome} da {marca} se destaca pela combina√ß√£o √∫nica de recursos, qualidade e pre√ßo acess√≠vel.</p>
            
            <h2>Vantagens Competitivas</h2>
            <h3>Superioridade T√©cnica</h3>
            <p>Comparado aos concorrentes, o {nome} oferece recursos exclusivos que garantem melhor desempenho e maior durabilidade.</p>
            
            <h3>Custo-Benef√≠cio Imbat√≠vel</h3>
            <ul>
                <li><strong>Pre√ßo competitivo:</strong> {preco_texto}</li>
                <li><strong>Baixo custo operacional:</strong> Economia de at√© 50%</li>
                <li><strong>Manuten√ß√£o reduzida:</strong> Componentes dur√°veis</li>
                <li><strong>Garantia estendida:</strong> Prote√ß√£o total</li>
            </ul>
            
            <h2>Por que Escolher o {nome}?</h2>
            <p>A escolha do {nome} representa um investimento seguro em tecnologia e qualidade. Com recursos avan√ßados e suporte t√©cnico especializado, voc√™ tem a garantia de um produto confi√°vel.</p>
            
            <h3>Satisfa√ß√£o Garantida</h3>
            <p>Milhares de usu√°rios j√° comprovaram a qualidade do {nome}. Junte-se a eles e experimente a diferen√ßa que um produto de qualidade pode fazer.</p>
            
            <h2>Conclus√£o</h2>
            <p>O {nome} √© mais que um produto - √© uma solu√ß√£o completa que combina inova√ß√£o, qualidade e pre√ßo justo. N√£o perca tempo e garante j√° o seu!</p>"""
        ]
        
        # Escolher estrutura aleat√≥ria
        content_html = random.choice(content_structures)
        
        # TAGS VARIADAS E ESPEC√çFICAS
        tag_sets = [
            [nome.lower().replace(' ', '-'), marca.lower(), "equipamento-escritorio", "tecnologia-avancada", "custo-beneficio", "review-2025"],
            [nome.lower().replace(' ', '-'), marca.lower(), "analise-tecnica", "especificacoes", "comparativo", "melhor-preco"],
            [nome.lower().replace(' ', '-'), marca.lower(), "guia-compra", "caracteristicas", "beneficios", "onde-comprar"],
            [nome.lower().replace(' ', '-'), marca.lower(), "review-completo", "pros-contras", "vale-a-pena", "investimento"],
            [nome.lower().replace(' ', '-'), marca.lower(), "tecnologia-2025", "inovacao", "sustentabilidade", "economia"]
        ]
        
        tags_seo = random.choice(tag_sets)
        
        # Criar estrutura de dados diretamente
        article_data = {
            "titulo": titulo_seo,
            "meta_descricao": meta_desc,
            "conteudo": content_html.strip(),
            "tags": tags_seo
        }
        
        # Converter para JSON para consist√™ncia com API
        content = json.dumps(article_data, ensure_ascii=False, indent=2)
        
        logger.info(f"üé≠ Conte√∫do simulado SEO otimizado gerado: {titulo_seo}")
        return content
    
    def _process_ai_response(self, ai_content: str, product: Dict[str, Any]) -> Dict[str, Any]:
        """Processa resposta da IA e extrai dados estruturados"""
        try:
            # Tentar extrair JSON da resposta
            json_match = re.search(r'\{.*\}', ai_content, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                article_data = json.loads(json_str)
            else:
                # Se n√£o for JSON, estruturar manualmente
                article_data = self._parse_text_response(ai_content, product)
            
            # Validar campos obrigat√≥rios
            required_fields = ['titulo', 'conteudo']
            for field in required_fields:
                if not article_data.get(field):
                    logger.warning(f"‚ö†Ô∏è Campo obrigat√≥rio '{field}' n√£o encontrado, usando fallback")
                    article_data[field] = self._generate_fallback_content(field, product)
            
            return article_data
            
        except json.JSONDecodeError:
            logger.warning("‚ö†Ô∏è Resposta da IA n√£o est√° em JSON v√°lido, fazendo parsing manual")
            return self._parse_text_response(ai_content, product)
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar resposta da IA: {e}")
            return self._generate_fallback_article(product)
    
    def _parse_text_response(self, text: str, product: Dict[str, Any]) -> Dict[str, Any]:
        """Parse manual de resposta em texto livre"""
        # Implementa√ß√£o b√°sica para extrair t√≠tulo e conte√∫do
        lines = text.split('\n')
        
        titulo = product.get('nome', 'Produto')
        conteudo = text
        
        # Tentar extrair t√≠tulo da primeira linha
        if lines and len(lines[0].strip()) > 0:
            first_line = lines[0].strip()
            if len(first_line) < 100:  # Provavelmente √© um t√≠tulo
                titulo = first_line
                conteudo = '\n'.join(lines[1:])
        
        return {
            'titulo': titulo,
            'conteudo': conteudo,
            'meta_descricao': f"Conhe√ßa {titulo}. Solu√ß√µes profissionais para seu escrit√≥rio.",
            'tags': [product.get('marca', ''), 'impressora', 'escrit√≥rio']
        }
    
    def _generate_fallback_content(self, field: str, product: Dict[str, Any]) -> str:
        """Gera conte√∫do de fallback para campos obrigat√≥rios"""
        nome = product.get('nome', 'Produto')
        
        fallbacks = {
            'titulo': f"{nome}: Solu√ß√µes Profissionais",
            'conteudo': f"<h2>{nome}</h2><p>Produto de alta qualidade para seu escrit√≥rio.</p>",
            'meta_descricao': f"Conhe√ßa {nome}. Ideal para profissionais.",
            'tags': [product.get('marca', ''), 'produto', 'escrit√≥rio']
        }
        
        return fallbacks.get(field, '')
    
    def _generate_fallback_article(self, product: Dict[str, Any]) -> Dict[str, Any]:
        """Gera artigo completo de fallback em caso de erro"""
        nome = product.get('nome', 'Produto')
        marca = product.get('marca', 'Marca')
        
        return {
            'titulo': f"{nome}: Solu√ß√µes Profissionais",
            'slug': self.seo_optimizer.generate_slug(f"{nome} solu√ß√µes profissionais"),
            'meta_descricao': f"Conhe√ßa {nome} da {marca}. Ideal para escrit√≥rios.",
            'conteudo': f"<h2>{nome}</h2><p>Produto de alta qualidade da {marca}.</p>",
            'tags': [marca, 'produto', 'escrit√≥rio']
        }
    
    def get_generation_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas do gerador"""
        return {
            'model': self.model,
            'temperature': self.temperature,
            'max_tokens': self.max_tokens,
            'simulation_mode': self.simulation_mode,
            'status': 'ready' if self.api_key or self.simulation_mode else 'no_api_key'
        } 
    
    def generate_article_from_random_product(self, **kwargs) -> Dict[str, Any]:
        """
        Gera artigo usando produto aleat√≥rio da base de dados
        
        Args:
            **kwargs: Argumentos para generate_article
            
        Returns:
            Dicion√°rio com artigo gerado
        """
        try:
            # FOR√áAR RESET DOS PRODUTOS USADOS para garantir variedade
            self.product_database.reset_used_products()
            
            # Obter produto aleat√≥rio
            product = self.product_database.get_random_product(exclude_used=True)
            logger.info(f"üé≤ Produto aleat√≥rio selecionado: {product['nome']} ({product['marca']})")
            
            # Gerar artigo
            return self.generate_article(product, **kwargs)
            
        except Exception as e:
            logger.error(f"‚ùå Erro na gera√ß√£o com produto aleat√≥rio: {e}")
            return {}
    
    def generate_articles_varied_batch(self, count: int = 5, **kwargs) -> List[Dict[str, Any]]:
        """
        Gera lote de artigos com produtos variados
        
        Args:
            count: N√∫mero de artigos a gerar
            **kwargs: Argumentos para generate_article
            
        Returns:
            Lista de artigos gerados
        """
        logger.info(f"üîÑ Gerando lote de {count} artigos com produtos variados")
        
        articles = []
        for i in range(count):
            try:
                logger.info(f"üìù Gerando artigo {i+1}/{count}")
                
                article = self.generate_article_from_random_product(**kwargs)
                if article:
                    articles.append(article)
                    logger.info(f"‚úÖ Artigo {i+1} gerado: {article.get('titulo', 'Sem t√≠tulo')[:50]}...")
                else:
                    logger.warning(f"‚ö†Ô∏è Falha na gera√ß√£o do artigo {i+1}")
                
                # Delay entre gera√ß√µes
                if not self.simulation_mode and i < count - 1:
                    import time
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no artigo {i+1}: {e}")
                continue
        
        success_rate = len(articles) / count * 100 if count > 0 else 0
        logger.info(f"‚úÖ Lote conclu√≠do: {len(articles)}/{count} artigos ({success_rate:.1f}%)")
        
        return articles

    def _clean_urls_in_content(self, content: str) -> str:
        """
        Remove espa√ßos extras dos URLs que a IA pode ter inserido
        
        Args:
            content: Conte√∫do HTML com URLs potencialmente malformadas
            
        Returns:
            Conte√∫do com URLs corrigidas
        """
        if not content:
            return content
        
        # Primeira passada: Corrigir padr√µes espec√≠ficos conhecidos
        url_fixes = [
            # Corrigir espa√ßos espec√≠ficos conhecidos
            (r'blog\. creativecopias\. com\. br', 'blog.creativecopias.com.br'),
            (r'creativecopias\. com\. br', 'creativecopias.com.br'),
            (r'www\. hp\. com', 'www.hp.com'),
            (r'www\. canon\. com', 'www.canon.com'),
            (r'www\. brother\. com', 'www.brother.com'),
            (r'www\. epson\. com', 'www.epson.com'),
            (r'www\. samsung\. com', 'www.samsung.com'),
            
            # Corrigir padr√µes mais gerais
            (r'(https?://[^"\s]*)\.\s+([^"\s/]*)\.\s+([^"\s/]*)', r'\1.\2.\3'),
            (r'(https?://[^"\s]*)\.\s+([^"\s/]*)', r'\1.\2'),
            
            # Corrigir espa√ßos dentro de URLs (mais agressivo)
            (r'(https?://[^"]*?)\s+([a-zA-Z0-9\-]+)\s+\.\s+([a-zA-Z0-9\-]+)\s+\.\s+([a-zA-Z]{2,})', r'\1\2.\3.\4'),
            (r'(https?://[^"]*?)\s+([a-zA-Z0-9\-]+)\s+\.\s+([a-zA-Z]{2,})', r'\1\2.\3'),
            
            # Corrigir padr√£o espec√≠fico que aparece: "blog . creativecopias . com . br"
            (r'blog\s*\.\s*creativecopias\s*\.\s*com\s*\.\s*br', 'blog.creativecopias.com.br'),
            (r'creativecopias\s*\.\s*com\s*\.\s*br', 'creativecopias.com.br'),
            (r'www\s*\.\s*hp\s*\.\s*com', 'www.hp.com'),
            (r'www\s*\.\s*canon\s*\.\s*com', 'www.canon.com'),
            (r'www\s*\.\s*brother\s*\.\s*com', 'www.brother.com'),
            (r'www\s*\.\s*epson\s*\.\s*com', 'www.epson.com'),
        ]
        
        cleaned_content = content
        
        # Aplicar todas as corre√ß√µes
        for pattern, replacement in url_fixes:
            cleaned_content = re.sub(pattern, replacement, cleaned_content, flags=re.IGNORECASE)
        
        # Segunda passada: Remover qualquer espa√ßo restante em URLs
        # Encontrar todas as URLs e corrigir espa√ßos internos
        def fix_url_spaces(match):
            url = match.group(1)
            # Remover todos os espa√ßos da URL
            fixed_url = re.sub(r'\s+', '', url)
            return f'href="{fixed_url}"'
        
        # Aplicar corre√ß√£o em todas as URLs encontradas
        cleaned_content = re.sub(r'href="([^"]*)"', fix_url_spaces, cleaned_content)
        
        return cleaned_content

    def generate_articles_diverse_brands(self, count: int = 5) -> List[Dict[str, Any]]:
        """
        Gera artigos garantindo diversidade de marcas
        
        Args:
            count: N√∫mero de artigos a gerar
            
        Returns:
            Lista de artigos com marcas diferentes
        """
        logger.info(f"üé® Gerando {count} artigos com marcas diversas")
        
        articles = []
        used_brands = set()
        
        # Resetar produtos usados
        self.product_database.reset_used_products()
        
        # Obter estat√≠sticas
        stats = self.product_database.get_statistics()
        available_brands = list(stats['por_marca'].keys())
        
        logger.info(f"üìä Marcas dispon√≠veis: {available_brands}")
        
        for i in range(count):
            try:
                # Tentar conseguir produto de marca ainda n√£o usada
                product = None
                attempts = 0
                max_attempts = 10
                
                while attempts < max_attempts:
                    candidate_product = self.product_database.get_random_product(exclude_used=True)
                    
                    # Se a marca ainda n√£o foi usada, ou se j√° tentamos muito, usar este produto
                    if candidate_product['marca'] not in used_brands or attempts >= 5:
                        product = candidate_product
                        break
                    
                    attempts += 1
                
                if not product:
                    logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel encontrar produto √∫nico para artigo {i+1}")
                    continue
                
                # Marcar marca como usada
                used_brands.add(product['marca'])
                
                logger.info(f"üìù Artigo {i+1}/{count}: {product['marca']} {product['nome']}")
                
                # Gerar artigo
                article = self.generate_article(product)
                if article:
                    articles.append(article)
                else:
                    logger.warning(f"‚ö†Ô∏è Falha na gera√ß√£o do artigo {i+1}")
                
                # Delay entre gera√ß√µes
                if not self.simulation_mode and i < count - 1:
                    import time
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"‚ùå Erro no artigo {i+1}: {e}")
                continue
        
        success_rate = len(articles) / count * 100 if count > 0 else 0
        logger.info(f"‚úÖ Gera√ß√£o diversa conclu√≠da: {len(articles)}/{count} artigos ({success_rate:.1f}%)")
        logger.info(f"üè∑Ô∏è Marcas utilizadas: {sorted(used_brands)}")
        
        return articles
 
 
 