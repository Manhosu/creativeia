"""
Sistema de Gera√ß√£o Autom√°tica de Conte√∫do SEO
Arquivo principal do FastAPI
"""

# Carregar vari√°veis de ambiente primeiro
import os

# Tentar carregar dotenv se dispon√≠vel (opcional)
try:
    from dotenv import load_dotenv
    load_dotenv()  # Carrega .env se existir
    load_dotenv("config.env")  # Carrega config.env
    load_dotenv("../config.env")  # Tenta carregar do diret√≥rio pai tamb√©m
    print("‚úÖ Vari√°veis de ambiente carregadas via dotenv")
except ImportError:
    print("‚ö†Ô∏è M√≥dulo dotenv n√£o dispon√≠vel, usando configura√ß√£o manual")
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao carregar dotenv: {e}")

# Configurar vari√°veis de ambiente essenciais - valores devem vir do .env
os.environ.setdefault('WORDPRESS_URL', 'https://blog.creativecopias.com.br/wp-json/wp/v2/')
os.environ.setdefault('WORDPRESS_USERNAME', 'api_seo_bot')
# WP_PASSWORD deve vir do .env - n√£o definir aqui
os.environ.setdefault('WP_SITE_URL', 'https://blog.creativecopias.com.br')
os.environ.setdefault('WP_USERNAME', 'api_seo_bot')
# WP_PASSWORD deve vir do .env - n√£o definir aqui
os.environ.setdefault('WP_AUTO_PUBLISH', 'true')
os.environ.setdefault('WP_DEFAULT_CATEGORY', 'geral')
os.environ.setdefault('WP_DEFAULT_STATUS', 'publish')

# Configurar outras vari√°veis importantes
os.environ['PORT'] = '3025'  # FOR√áAR porta 3025
# N√£o definir chave de API aqui - deve vir do .env
if not os.getenv('OPENAI_API_KEY'):
    logger.warning("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada nas vari√°veis de ambiente")
if not os.getenv('WP_PASSWORD'):
    logger.warning("‚ö†Ô∏è WP_PASSWORD n√£o encontrada nas vari√°veis de ambiente")
os.environ.setdefault('OPENAI_MODEL', 'gpt-4o-mini')

# Log das vari√°veis carregadas
print(f"üîß Configura√ß√µes carregadas:")
print(f"   PORT: {os.getenv('PORT')}")
print(f"   WP_SITE_URL: {os.getenv('WP_SITE_URL')}")
print(f"   WP_USERNAME: {os.getenv('WP_USERNAME')}")
print(f"   OPENAI_API_KEY: {'‚úÖ Configurada' if os.getenv('OPENAI_API_KEY') else '‚ùå N√£o encontrada'}")
print(f"   OPENAI_MODEL: {os.getenv('OPENAI_MODEL')}")

# Configura√ß√µes WordPress v√™m das vari√°veis de ambiente
# N√£o for√ßar valores hardcoded aqui

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from contextlib import asynccontextmanager
from pydantic import BaseModel
import logging
from loguru import logger
from typing import List
from datetime import datetime
from fastapi.openapi.utils import get_openapi

# Importar m√≥dulo scraper
try:
    from src.scraper.scraper_manager import ScraperManager
    SCRAPER_AVAILABLE = True
except ImportError:
    SCRAPER_AVAILABLE = False
    logger.warning("‚ö†Ô∏è M√≥dulo scraper n√£o dispon√≠vel")

# Importar m√≥dulo generator
try:
    from src.generator.generator_manager import GeneratorManager
    GENERATOR_AVAILABLE = True
except ImportError:
    GENERATOR_AVAILABLE = False
    logger.warning("‚ö†Ô∏è M√≥dulo generator n√£o dispon√≠vel")

# Importar m√≥dulo review
try:
    from src.review.review_manager import ReviewManager
    REVIEW_AVAILABLE = True
except ImportError:
    REVIEW_AVAILABLE = False
    logger.warning("‚ö†Ô∏è M√≥dulo review n√£o dispon√≠vel")

# Importar m√≥dulo publisher
try:
    from src.publisher.publication_manager import PublicationManager
    PUBLISHER_AVAILABLE = True
except ImportError:
    PUBLISHER_AVAILABLE = False
    logger.warning("‚ö†Ô∏è M√≥dulo publisher n√£o dispon√≠vel")

# Importar m√≥dulo config
try:
    from src.config.config_manager import ConfigManager
    CONFIG_AVAILABLE = True
except ImportError:
    CONFIG_AVAILABLE = False
    logger.warning("‚ö†Ô∏è M√≥dulo config n√£o dispon√≠vel")

# Importar m√≥dulo scheduler
try:
    from src.scheduler.scheduler_manager import SchedulerManager
    SCHEDULER_AVAILABLE = True
    logger.info("‚úÖ M√≥dulo scheduler carregado com sucesso")
except ImportError as e:
    SCHEDULER_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è M√≥dulo scheduler n√£o dispon√≠vel: {e}")

# Configura√ß√µes
APP_NAME = "Sistema de Gera√ß√£o Autom√°tica de Conte√∫do SEO"
APP_VERSION = "1.0.0"
PORT = int(os.getenv("PORT", 3025))

# Configura√ß√£o de logs
logger.add("logs/main.log", rotation="1 week", retention="30 days", level="INFO")

# Models para requests
class ScrapingRequest(BaseModel):
    url: str = None
    full_scraping: bool = False

class GenerationRequest(BaseModel):
    product_id: str = None
    product_data: dict = None
    custom_keywords: List[str] = None
    custom_instructions: str = None
    tone: str = "profissional"

class ReviewRequest(BaseModel):
    titulo: str = None
    slug: str = None
    meta_descricao: str = None
    conteudo: str = None
    tags: List[str] = None
    comentario_revisor: str = None

class ReviewActionRequest(BaseModel):
    comment: str = ""
    reviewer: str = "Sistema"

class PublicationRequest(BaseModel):
    article_id: int
    publish_immediately: bool = True
    scheduled_date: str = None  # ISO format string

class WordPressConfigRequest(BaseModel):
    site_url: str
    username: str
    password: str

class ConfigUpdateRequest(BaseModel):
    configurations: dict = None

class URLAddRequest(BaseModel):
    category: str
    name: str
    url: str
    priority: int = 5

class TemplateAddRequest(BaseModel):
    template_name: str
    product_type: str
    title_template: str
    content_template: str
    meta_description_template: str = None
    keywords_template: str = None

class JobExecutionRequest(BaseModel):
    job_id: str = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    logger.info("üöÄ Iniciando Sistema de Gera√ß√£o de Conte√∫do SEO")
    
    # Inicializa√ß√£o
    try:
        # Criar diret√≥rios necess√°rios
        os.makedirs("logs", exist_ok=True)
        os.makedirs("static", exist_ok=True)
        os.makedirs("templates", exist_ok=True)
        
        logger.info("üìÅ Diret√≥rios criados com sucesso")
        
        # Inicializar banco de dados
        # await init_database()
        
        # Inicializar scheduler autom√°tico
        if SCHEDULER_AVAILABLE:
            try:
                global scheduler_manager
                scheduler_manager = SchedulerManager()
                scheduler_manager.start()
                logger.info("‚è∞ Scheduler iniciado com sucesso")
            except Exception as e:
                logger.error(f"‚ùå Erro ao iniciar scheduler: {e}")
        
        logger.info("‚úÖ Aplica√ß√£o iniciada com sucesso")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
        raise
    
    yield
    
    # Finaliza√ß√£o
    logger.info("üõë Finalizando aplica√ß√£o")
    
    # Parar scheduler se estiver rodando
    if SCHEDULER_AVAILABLE and 'scheduler_manager' in globals():
        try:
            scheduler_manager.stop()
            logger.info("‚è∞ Scheduler parado com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao parar scheduler: {e}")


# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title=APP_NAME,
    description="Sistema automatizado para gera√ß√£o de conte√∫do SEO baseado em produtos de e-commerce",
    version=APP_VERSION,
    docs_url=None,
    redoc_url="/redoc",
    lifespan=lifespan
)

# Customiza√ß√£o do Swagger UI com CSS e JavaScript
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    """Swagger UI customizado com busca e tema dark"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <link type="text/css" rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.17.14/swagger-ui.css">
        <link rel="shortcut icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>‚öôÔ∏è</text></svg>">
        <title>Sistema de Gera√ß√£o de Conte√∫do SEO - Documenta√ß√£o API</title>
        <style>
            /* CSS Customizado para Dark Mode e Melhorias */
            :root {
                --bg-primary: #0a0a0a;
                --bg-secondary: #1a1a1a;
                --bg-tertiary: #2a2a2a;
                --text-primary: #ffffff;
                --text-secondary: #a1a1aa;
                --accent-blue: #007aff;
                --accent-green: #34c759;
                --accent-orange: #ff9500;
                --accent-red: #ff3b30;
                --glass-bg: rgba(255, 255, 255, 0.05);
                --glass-border: rgba(255, 255, 255, 0.1);
            }
            
            /* Dark Mode Base */
            body {
                background: var(--bg-primary) !important;
                color: var(--text-primary) !important;
                font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif !important;
                margin: 0;
                padding: 0;
            }
            
            .swagger-ui {
                background: var(--bg-primary) !important;
            }
            
            .swagger-ui .topbar {
                background: var(--bg-secondary) !important;
                border-bottom: 1px solid var(--glass-border) !important;
                padding: 10px 0;
            }
            
            .swagger-ui .info {
                margin: 30px 0 !important;
                background: var(--bg-secondary) !important;
                padding: 20px !important;
                border-radius: 8px !important;
            }
            
            .swagger-ui .info .title {
                color: var(--accent-blue) !important;
                font-size: 2rem !important;
                font-weight: 700 !important;
            }
            
            /* Barra de busca customizada */
            .custom-search-bar {
                position: sticky;
                top: 0;
                background: var(--glass-bg);
                backdrop-filter: blur(20px);
                border: 1px solid var(--glass-border);
                border-radius: 16px;
                padding: 20px;
                margin: 20px;
                z-index: 1000;
            }
            
            .search-container {
                display: flex;
                gap: 15px;
                align-items: center;
                flex-wrap: wrap;
            }
            
            .search-input {
                flex: 1;
                min-width: 300px;
                padding: 12px 16px;
                background: var(--bg-tertiary);
                border: 1px solid var(--glass-border);
                border-radius: 8px;
                color: var(--text-primary);
                font-size: 14px;
            }
            
            .search-input::placeholder {
                color: var(--text-secondary);
            }
            
            .search-input:focus {
                outline: none;
                border-color: var(--accent-blue);
                box-shadow: 0 0 0 2px rgba(0, 122, 255, 0.2);
            }
            
            .filter-buttons {
                display: flex;
                gap: 8px;
                flex-wrap: wrap;
            }
            
            .filter-btn {
                padding: 6px 12px;
                background: var(--bg-tertiary);
                border: 1px solid var(--glass-border);
                border-radius: 16px;
                color: var(--text-secondary);
                cursor: pointer;
                font-size: 12px;
                transition: all 0.3s ease;
            }
            
            .filter-btn:hover, .filter-btn.active {
                background: var(--accent-blue);
                color: white;
                border-color: var(--accent-blue);
            }
            
            .search-stats {
                color: var(--text-secondary);
                font-size: 12px;
                margin-left: 10px;
            }
            
            /* Estiliza√ß√£o das opera√ß√µes */
            .swagger-ui .opblock {
                margin: 10px 0;
                border-radius: 8px !important;
                border: 1px solid var(--glass-border) !important;
                background: var(--bg-secondary) !important;
            }
            
            .swagger-ui .opblock.opblock-get {
                border-left: 4px solid var(--accent-blue) !important;
            }
            
            .swagger-ui .opblock.opblock-post {
                border-left: 4px solid var(--accent-green) !important;
            }
            
            .swagger-ui .opblock.opblock-delete {
                border-left: 4px solid var(--accent-red) !important;
            }
            
            .swagger-ui .opblock.opblock-put {
                border-left: 4px solid var(--accent-orange) !important;
            }
            
            /* Dark theme para swagger */
            .swagger-ui .scheme-container,
            .swagger-ui .wrapper,
            .swagger-ui .opblock-tag,
            .swagger-ui .opblock .opblock-summary {
                background: var(--bg-secondary) !important;
                color: var(--text-primary) !important;
            }
            
            .swagger-ui .opblock .opblock-summary-description {
                color: var(--text-primary) !important;
            }
            
            .swagger-ui .opblock .opblock-summary-path {
                color: var(--accent-blue) !important;
            }
            
            /* Ocultar opera√ß√µes filtradas */
            .swagger-ui .opblock.hidden-by-search {
                display: none !important;
            }
            
            .swagger-ui .opblock-tag.hidden-by-search {
                display: none !important;
            }
            
            /* Bot√£o de voltar ao dashboard */
            .back-to-dashboard {
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: var(--accent-blue);
                color: white !important;
                padding: 12px 16px;
                border-radius: 50px;
                text-decoration: none;
                font-weight: 500;
                box-shadow: 0 8px 25px rgba(0, 122, 255, 0.4);
                transition: all 0.3s ease;
                z-index: 1001;
            }
            
            .back-to-dashboard:hover {
                transform: translateY(-2px);
                box-shadow: 0 12px 35px rgba(0, 122, 255, 0.6);
                color: white !important;
                text-decoration: none;
            }
            
            /* Responsividade */
            @media (max-width: 768px) {
                .search-container {
                    flex-direction: column;
                    align-items: stretch;
                }
                
                .search-input {
                    min-width: auto;
                }
                
                .filter-buttons {
                    justify-content: center;
                }
                
                .custom-search-bar {
                    margin: 10px;
                    padding: 15px;
                }
            }
        </style>
    </head>
    <body>
        <div class="custom-search-bar">
            <div class="search-container">
                <input type="text" id="apiSearch" class="search-input" placeholder="üîç Buscar endpoints, opera√ß√µes ou descri√ß√µes...">
                <div class="filter-buttons">
                    <button class="filter-btn active" data-method="all">Todos</button>
                    <button class="filter-btn" data-method="get">GET</button>
                    <button class="filter-btn" data-method="post">POST</button>
                    <button class="filter-btn" data-method="delete">DELETE</button>
                    <button class="filter-btn" data-method="put">PUT</button>
                </div>
                <span class="search-stats" id="searchStats">Carregando endpoints...</span>
            </div>
        </div>
        <a href="/" class="back-to-dashboard">‚Üê Dashboard</a>
        <div id="swagger-ui"></div>
        
        <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@5.17.14/swagger-ui-bundle.js"></script>
        <script>
            const ui = SwaggerUIBundle({
                url: '/openapi.json',
                dom_id: '#swagger-ui',
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIBundle.presets.standalone
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout",
                syntaxHighlight: {
                    activated: true,
                    theme: "agate"
                },
                tryItOutEnabled: true,
                displayRequestDuration: true,
                showExtensions: true,
                showCommonExtensions: true,
                docExpansion: "list",
                operationsSorter: "alpha",
                defaultModelsExpandDepth: 1,
                defaultModelExpandDepth: 1
            });
            
            // JavaScript para funcionalidade de busca avan√ßada
            document.addEventListener('DOMContentLoaded', function() {
                let currentFilter = 'all';
                let searchTerm = '';
                
                const searchInput = document.getElementById('apiSearch');
                const filterButtons = document.querySelectorAll('.filter-btn');
                const searchStats = document.getElementById('searchStats');
                
                // Aguardar o Swagger UI carregar completamente
                const waitForSwaggerUI = () => {
                    if (document.querySelectorAll('.opblock').length > 0) {
                        initializeSearch();
                    } else {
                        setTimeout(waitForSwaggerUI, 500);
                    }
                };
                
                const initializeSearch = () => {
                    updateStats();
                    setupEventListeners();
                };
                
                const setupEventListeners = () => {
                    // Busca em tempo real
                    searchInput.addEventListener('input', (e) => {
                        searchTerm = e.target.value.toLowerCase();
                        performSearch();
                    });
                    
                    // Filtros por m√©todo
                    filterButtons.forEach(btn => {
                        btn.addEventListener('click', (e) => {
                            filterButtons.forEach(b => b.classList.remove('active'));
                            e.target.classList.add('active');
                            currentFilter = e.target.dataset.method;
                            performSearch();
                        });
                    });
                    
                    // Atalhos de teclado
                    document.addEventListener('keydown', (e) => {
                        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                            e.preventDefault();
                            searchInput.focus();
                        }
                        
                        if (e.key === 'Escape' && document.activeElement === searchInput) {
                            searchInput.value = '';
                            searchTerm = '';
                            performSearch();
                        }
                    });
                };
                
                const performSearch = () => {
                    const operations = document.querySelectorAll('.opblock');
                    const sections = document.querySelectorAll('.opblock-tag');
                    let visibleCount = 0;
                    
                    operations.forEach(op => {
                        const method = getOperationMethod(op);
                        const summary = op.querySelector('.opblock-summary-description')?.textContent?.toLowerCase() || '';
                        const path = op.querySelector('.opblock-summary-path')?.textContent?.toLowerCase() || '';
                        const tag = op.closest('.opblock-tag')?.querySelector('.opblock-tag-section h3')?.textContent?.toLowerCase() || '';
                        
                        const matchesMethod = currentFilter === 'all' || method === currentFilter;
                        const matchesSearch = searchTerm === '' || 
                                           summary.includes(searchTerm) || 
                                           path.includes(searchTerm) || 
                                           tag.includes(searchTerm);
                        
                        if (matchesMethod && matchesSearch) {
                            op.classList.remove('hidden-by-search');
                            visibleCount++;
                        } else {
                            op.classList.add('hidden-by-search');
                        }
                    });
                    
                    // Ocultar se√ß√µes vazias
                    sections.forEach(section => {
                        const visibleOps = section.querySelectorAll('.opblock:not(.hidden-by-search)');
                        if (visibleOps.length === 0) {
                            section.classList.add('hidden-by-search');
                        } else {
                            section.classList.remove('hidden-by-search');
                        }
                    });
                    
                    updateStats(visibleCount);
                };
                
                const getOperationMethod = (operation) => {
                    if (operation.classList.contains('opblock-get')) return 'get';
                    if (operation.classList.contains('opblock-post')) return 'post';
                    if (operation.classList.contains('opblock-delete')) return 'delete';
                    if (operation.classList.contains('opblock-put')) return 'put';
                    if (operation.classList.contains('opblock-patch')) return 'patch';
                    return 'unknown';
                };
                
                const updateStats = (visible = null) => {
                    const total = document.querySelectorAll('.opblock').length;
                    const count = visible !== null ? visible : total;
                    searchStats.textContent = `${count} de ${total} endpoints encontrados`;
                };
                
                // Inicializar quando o Swagger UI estiver pronto
                setTimeout(waitForSwaggerUI, 3000);
                
                // Recriar listeners se o Swagger UI recarregar
                const observer = new MutationObserver(() => {
                    if (document.querySelectorAll('.opblock').length > 0) {
                        setTimeout(initializeSearch, 1000);
                    }
                });
                
                observer.observe(document.getElementById('swagger-ui'), {
                    childList: true,
                    subtree: true
                });
            });
        </script>
    </body>
    </html>
    """)

# Configura√ß√£o de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configura√ß√£o de arquivos est√°ticos e templates
templates = None
try:
    if os.path.exists("static"):
        app.mount("/static", StaticFiles(directory="static"), name="static")
    if os.path.exists("templates"):
        templates = Jinja2Templates(directory="templates")
    logger.info("‚úÖ Arquivos est√°ticos e templates configurados")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel configurar arquivos est√°ticos: {e}")
    templates = None


# =====================================================
# CUSTOMIZA√á√ÉO DO OPENAPI
# =====================================================

def custom_openapi():
    """Gera√ß√£o customizada do OpenAPI para compatibilidade com Swagger UI"""
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title=APP_NAME,
        version=APP_VERSION,
        description="Sistema automatizado para gera√ß√£o de conte√∫do SEO baseado em produtos de e-commerce",
        routes=app.routes,
    )
    
    # For√ßar vers√£o 3.0.0 para compatibilidade com Swagger UI
    openapi_schema["openapi"] = "3.0.0"
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi


# =====================================================
# ROTAS PRINCIPAIS
# =====================================================

@app.get("/")
async def dashboard():
    """Dashboard principal do sistema"""
    try:
        # Status simplificado para usu√°rio final
        scraper_ready = SCRAPER_AVAILABLE
        generator_ready = GENERATOR_AVAILABLE  
        system_ready = scraper_ready and generator_ready
        
        html_content = """
        <!DOCTYPE html>
        <html lang="pt-BR">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Sistema Creative API</title>
                <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
                <style>
                    * {
                        margin: 0;
                        padding: 0;
                        box-sizing: border-box;
                    }
                    
                    :root {
                        --primary: #6366f1;
                        --primary-dark: #4f46e5;
                        --success: #10b981;
                        --warning: #f59e0b;
                        --danger: #ef4444;
                        --bg-primary: #0f172a;
                        --bg-secondary: #1e293b;
                        --bg-card: #334155;
                        --text-primary: #f8fafc;
                        --text-secondary: #cbd5e1;
                    }
                    
                    body { 
                        font-family: 'Inter', sans-serif; 
                        background: linear-gradient(135deg, var(--bg-primary) 0%, #1e293b 100%);
                        color: var(--text-primary);
                        min-height: 100vh;
                        line-height: 1.6;
                    }
                    
                    .container { 
                        max-width: 1200px; 
                        margin: 0 auto; 
                        padding: 20px;
                    }
                    
                    .header {
                        text-align: center;
                        margin-bottom: 40px;
                        padding: 40px 20px;
                    }
                    
                    .header h1 { 
                        font-size: 3rem;
                        font-weight: 700;
                        margin-bottom: 15px;
                        background: linear-gradient(135deg, var(--primary), var(--success));
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-clip: text;
                    }
                    
                    .header p {
                        font-size: 1.25rem;
                        color: var(--text-secondary);
                        max-width: 600px;
                        margin: 0 auto;
                    }
                    
                    .status-banner {
                        background: linear-gradient(135deg, var(--success), #059669);
                        padding: 20px;
                        border-radius: 15px;
                        text-align: center;
                        margin-bottom: 40px;
                        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
                    }
                    
                    .status-banner h3 {
                        font-size: 1.5rem;
                        margin-bottom: 10px;
                        font-weight: 600;
                    }
                    
                    .quick-actions {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                        gap: 30px;
                        margin-bottom: 50px;
                    }
                    
                    .action-card {
                        background: var(--bg-card);
                        border-radius: 20px;
                        padding: 30px;
                        text-align: center;
                        transition: all 0.3s ease;
                        border: 2px solid transparent;
                        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
                    }
                    
                    .action-card:hover {
                        transform: translateY(-5px);
                        border-color: var(--primary);
                        box-shadow: 0 20px 40px rgba(0,0,0,0.4);
                    }
                    
                    .action-icon {
                        font-size: 4rem;
                        margin-bottom: 20px;
                        display: block;
                    }
                    
                    .action-title {
                        font-size: 1.5rem;
                        font-weight: 600;
                        margin-bottom: 15px;
                        color: var(--text-primary);
                    }
                    
                    .action-desc {
                        color: var(--text-secondary);
                        margin-bottom: 25px;
                        font-size: 1.1rem;
                    }
                    
                    .action-btn {
                        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
                        color: white;
                        border: none;
                        padding: 15px 30px;
                        border-radius: 50px;
                        font-size: 1.1rem;
                        font-weight: 600;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        text-decoration: none; 
                        display: inline-block;
                        box-shadow: 0 5px 15px rgba(99, 102, 241, 0.4);
                    }
                    
                    .action-btn:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 10px 25px rgba(99, 102, 241, 0.6);
                    }
                    
                    .action-btn.complete-btn {
                        background: linear-gradient(135deg, var(--success), #059669);
                        box-shadow: 0 5px 15px rgba(16, 185, 129, 0.4);
                        font-size: 1.2rem;
                        padding: 20px 40px;
                    }
                    
                    .action-btn.complete-btn:hover {
                        box-shadow: 0 10px 25px rgba(16, 185, 129, 0.6);
                    }
                    
                    .workflow-section {
                        background: var(--bg-secondary);
                        border-radius: 20px;
                        padding: 40px;
                        margin-bottom: 40px;
                        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
                    }
                    
                    .workflow-title {
                        text-align: center;
                        font-size: 2rem;
                        font-weight: 600;
                        margin-bottom: 30px;
                        color: var(--primary);
                    }
                    
                    .complete-workflow {
                        text-align: center;
                        margin-top: 30px;
                    }
                    
                    .notification {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        background: var(--bg-card);
                        color: var(--text-primary);
                        padding: 20px;
                        border-radius: 15px;
                        border-left: 4px solid var(--success);
                        max-width: 400px;
                        transform: translateX(450px);
                        transition: transform 0.3s ease;
                        z-index: 1000;
                        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
                    }
                    
                    .notification.show {
                        transform: translateX(0);
                    }
                    
                    @media (max-width: 768px) {
                        .header h1 { font-size: 2.5rem; }
                        .quick-actions { grid-template-columns: 1fr; }
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>Sistema Creative API</h1>
                        <p>Gera√ß√£o Autom√°tica de Artigos com IA</p>
                    </div>
                    
                    <div class="status-banner">
                        <h3>‚úÖ Sistema Operacional</h3>
                        <p>Todos os m√≥dulos est√£o funcionando corretamente</p>
                    </div>
                    
                    <div class="quick-actions">
                        <div class="action-card">
                            <div class="action-icon">‚öôÔ∏è</div>
                            <div class="action-title">Buscar Produtos</div>
                            <div class="action-desc">Encontre produtos automaticamente</div>
                            <a href="/interface/scraper" class="action-btn">Acessar</a>
                        </div>
                        
                        <div class="action-card">
                            <div class="action-icon">‚öôÔ∏è</div>
                            <div class="action-title">Gerar Artigos</div>
                            <div class="action-desc">Crie artigos com IA</div>
                            <a href="/interface/generator" class="action-btn">Acessar</a>
                        </div>
                        
                        <div class="action-card">
                            <div class="action-icon">üìù</div>
                            <div class="action-title">Revisar Conte√∫do</div>
                            <div class="action-desc">Revise e aprove artigos</div>
                            <a href="/interface/review" class="action-btn">Acessar</a>
                        </div>
                        
                        <div class="action-card">
                            <div class="action-icon">üöÄ</div>
                            <div class="action-title">Publicar</div>
                            <div class="action-desc">Publique no WordPress</div>
                            <a href="/interface/publisher" class="action-btn">Acessar</a>
                            </div>
                        </div>
                        
                    <div class="workflow-section">
                        <h2 class="workflow-title">üéØ Processo Completo</h2>
                        <p style="text-align: center; color: var(--text-secondary); margin-bottom: 30px;">
                            Execute todo o fluxo automaticamente: buscar produtos ‚Üí gerar artigos ‚Üí disponibilizar para revis√£o
                        </p>
                        
                        <div class="complete-workflow">
                            <button onclick="runCompleteWorkflow()" class="action-btn complete-btn">
                                ‚ú® Executar Processo Completo Agora
                            </button>
                            </div>
                        </div>
                    </div>
                    
                <div class="notification" id="notification">
                    <div style="font-weight: 600;">‚úÖ Sistema Pronto!</div>
                    <div style="font-size: 0.9rem; margin-top: 5px;">Todas as funcionalidades est√£o dispon√≠veis</div>
                </div>
                
                <script>
                    function runCompleteWorkflow() {
                        const notification = document.getElementById('notification');
                        const completeBtn = document.querySelector('.complete-btn');
                        
                        // Desabilitar bot√£o e mostrar loading
                        completeBtn.style.opacity = '0.7';
                        completeBtn.style.pointerEvents = 'none';
                        completeBtn.innerHTML = '‚è≥ Executando...';
                        
                        // Mostrar notifica√ß√£o de progresso
                        notification.innerHTML = 
                            '<div style="font-weight: 600;">üöÄ Processo Iniciado!</div>' +
                            '<div style="font-size: 0.9rem; margin-top: 5px;">Executando fluxo completo...</div>' +
                            '<div style="width: 100%; height: 4px; background: rgba(255,255,255,0.2); border-radius: 2px; margin-top: 10px; overflow: hidden;">' +
                                '<div style="width: 0%; height: 100%; background: linear-gradient(90deg, #10b981, #34d399); transition: width 2s ease;" id="progressBar"></div>' +
                            '</div>';
                        notification.classList.add('show');
                        
                        // Animar progresso
                        setTimeout(() => {
                            document.getElementById('progressBar').style.width = '100%';
                        }, 500);
                        
                        // Chamar a API
                        fetch('/scheduler/run', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({})
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log('Processo executado:', data);
                            
                            setTimeout(() => {
                                if (data.success) {
                                    notification.innerHTML = 
                                        '<div style="font-weight: 600;">üéâ Processo Conclu√≠do!</div>' +
                                        '<div style="font-size: 0.9rem; margin-top: 5px; margin-bottom: 15px;">' +
                                            (data.message || 'Artigos gerados com sucesso!') +
                                        '</div>' +
                                        '<div style="display: flex; gap: 10px;">' +
                                            '<a href="/interface/review" style="background: #10b981; color: white; padding: 8px 16px; border-radius: 6px; text-decoration: none; font-size: 0.9rem; font-weight: 500;">' +
                                                'üìù Ver Artigos para Revis√£o' +
                                            '</a>' +
                                            '<button onclick="this.parentElement.parentElement.classList.remove(\\'show\\')" style="background: rgba(255,255,255,0.1); color: white; border: none; padding: 8px 16px; border-radius: 6px; font-size: 0.9rem; cursor: pointer;">' +
                                                'Fechar' +
                                            '</button>' +
                                        '</div>';
                                } else {
                                    notification.innerHTML = 
                                        '<div style="font-weight: 600; color: #ef4444;">‚ùå Erro no Processo</div>' +
                                        '<div style="font-size: 0.9rem; margin-top: 5px;">' +
                                            (data.message || 'Erro durante a execu√ß√£o. Tente novamente.') +
                                        '</div>';
                                    notification.style.borderLeftColor = '#ef4444';
                                }
                            }, 3000);
                            
                            // Reabilitar bot√£o
                            setTimeout(() => {
                                completeBtn.style.opacity = '1';
                                completeBtn.style.pointerEvents = 'auto';
                                completeBtn.innerHTML = '‚ú® Executar Processo Completo Agora';
                            }, 5000);
                        })
                        .catch(error => {
                            console.error('Erro:', error);
                            
                            setTimeout(() => {
                                notification.innerHTML = 
                                    '<div style="font-weight: 600; color: #ef4444;">‚ùå Erro de Conex√£o</div>' +
                                    '<div style="font-size: 0.9rem; margin-top: 5px;">' +
                                        'N√£o foi poss√≠vel executar o processo. Verifique a conex√£o e tente novamente.' +
                                    '</div>' +
                                    '<button onclick="this.parentElement.classList.remove(\\'show\\')" style="background: rgba(255,255,255,0.1); color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 0.9rem; cursor: pointer; margin-top: 10px;">' +
                                        'Fechar' +
                                    '</button>';
                                notification.style.borderLeftColor = '#ef4444';
                            }, 1000);
                            
                            // Reabilitar bot√£o
                            completeBtn.style.opacity = '1';
                            completeBtn.style.pointerEvents = 'auto';
                            completeBtn.innerHTML = '‚ú® Executar Processo Completo Agora';
                        });
                    }

                    // Sistema de Execu√ß√£o Individual com Feedback Visual Elegante
                    async function executeModule(moduleName, endpoint, buttonElement) {
                        if (!buttonElement) {
                            console.error('Elemento do bot√£o n√£o encontrado');
                            return;
                        }
                        
                        const originalText = buttonElement.innerHTML;
                        
                        // Estado de loading
                        buttonElement.innerHTML = '‚è≥ Verificando...';
                        buttonElement.style.background = 'linear-gradient(135deg, #6c757d, #495057)';
                        buttonElement.style.pointerEvents = 'none';
                        
                        try {
                            const response = await fetch(endpoint, {
                                method: 'GET',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            if (response.ok) {
                                const result = await response.json();
                                
                                // Simular processamento para melhor UX
                                await new Promise(resolve => setTimeout(resolve, 1000));
                                
                                // Sucesso
                                buttonElement.innerHTML = '‚úÖ Dispon√≠vel!';
                                buttonElement.style.background = 'linear-gradient(135deg, #28a745, #20c997)';
                                
                                // Notifica√ß√£o de sucesso
                                showSuccessNotification(`${moduleName} Verificado!`, `${moduleName} est√° funcionando corretamente!`);
                                
                                // Overlay de sucesso
                                showSuccessOverlay(`${moduleName} OK! üéâ`, `O m√≥dulo ${moduleName} est√° operacional e pronto para uso.`);
                                
                                // Resetar bot√£o ap√≥s 3 segundos
                                setTimeout(() => {
                                    if (buttonElement) {
                                        buttonElement.innerHTML = originalText;
                                        buttonElement.style.background = '';
                                        buttonElement.style.pointerEvents = 'auto';
                                    }
                                }, 3000);
                                
                            } else {
                                // Tratar diferentes tipos de erro
                                let errorMessage = `Erro ${response.status}`;
                                if (response.status === 503) {
                                    errorMessage = 'M√≥dulo temporariamente indispon√≠vel';
                                } else if (response.status === 404) {
                                    errorMessage = 'Endpoint n√£o encontrado';
                                } else if (response.status >= 500) {
                                    errorMessage = 'Erro interno do servidor';
                                }
                                
                                // Estado de aviso para m√≥dulos n√£o dispon√≠veis
                                buttonElement.innerHTML = '‚ö†Ô∏è Indispon√≠vel';
                                buttonElement.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
                                
                                // Notifica√ß√£o de aviso
                                showWarningNotification(`${moduleName} Indispon√≠vel`, errorMessage);
                                
                                // Resetar bot√£o ap√≥s 3 segundos
                                setTimeout(() => {
                                    if (buttonElement) {
                                        buttonElement.innerHTML = originalText;
                                        buttonElement.style.background = '';
                                        buttonElement.style.pointerEvents = 'auto';
                                    }
                                }, 3000);
                            }
                            
                        } catch (error) {
                            console.error(`Erro na verifica√ß√£o do ${moduleName}:`, error);
                            
                            // Estado de erro
                            if (buttonElement) {
                                buttonElement.innerHTML = '‚ùå Erro';
                                buttonElement.style.background = 'linear-gradient(135deg, #dc3545, #c82333)';
                            }
                            
                            // Notifica√ß√£o de erro
                            showErrorNotification(`Erro no ${moduleName}`, 'N√£o foi poss√≠vel conectar ao m√≥dulo');
                            
                            // Resetar bot√£o ap√≥s 3 segundos
                            setTimeout(() => {
                                if (buttonElement) {
                                    buttonElement.innerHTML = originalText;
                                    buttonElement.style.background = '';
                                    buttonElement.style.pointerEvents = 'auto';
                                }
                            }, 3000);
                        }
                    }

                    function showSuccessNotification(title, message) {
                        createNotification(title, message, 'success', 'üéâ');
                    }

                    function showWarningNotification(title, message) {
                        createNotification(title, message, 'warning', '‚ö†Ô∏è');
                    }

                    function showErrorNotification(title, message) {
                        createNotification(title, message, 'error', '‚ùå');
                    }

                    function createNotification(title, message, type, icon) {
                        const container = getOrCreateNotificationContainer();
                        const notification = document.createElement('div');
                        notification.className = `notification ${type}`;
                        
                        notification.innerHTML = `
                            <div class="notification-content">
                                <div class="notification-header">
                                    <span class="notification-icon">${icon}</span>
                                    <h4 class="notification-title">${title}</h4>
                                </div>
                                <p class="notification-message">${message}</p>
                                <div class="notification-progress"></div>
                            </div>
                        `;
                        
                        // Aplicar estilos diretamente
                        notification.style.cssText = `
                            background: white;
                            border-radius: 12px;
                            padding: 20px;
                            margin-bottom: 15px;
                            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
                            border-left: 5px solid ${type === 'success' ? '#28a745' : type === 'warning' ? '#f59e0b' : '#dc3545'};
                            transform: translateX(400px);
                            animation: slideIn 0.5s ease-out forwards;
                            position: relative;
                            overflow: hidden;
                            max-width: 350px;
                        `;
                        
                        const content = notification.querySelector('.notification-content');
                        content.style.cssText = 'position: relative; z-index: 2;';
                        
                        const header = notification.querySelector('.notification-header');
                        header.style.cssText = 'display: flex; align-items: center; margin-bottom: 8px;';
                        
                        const iconEl = notification.querySelector('.notification-icon');
                        iconEl.style.cssText = 'font-size: 1.5rem; margin-right: 10px;';
                        
                        const titleEl = notification.querySelector('.notification-title');
                        titleEl.style.cssText = 'font-weight: 600; color: #2c3e50; margin: 0; font-size: 1rem;';
                        
                        const messageEl = notification.querySelector('.notification-message');
                        messageEl.style.cssText = 'color: #7f8c8d; margin: 0; font-size: 0.9rem; line-height: 1.4;';
                        
                        const progress = notification.querySelector('.notification-progress');
                        progress.style.cssText = `
                            position: absolute;
                            top: 0;
                            left: 0;
                            height: 3px;
                            background: ${type === 'success' ? '#28a745' : type === 'warning' ? '#f59e0b' : '#dc3545'};
                            animation: progressBar 4s linear forwards;
                            transform-origin: left;
                        `;
                        
                        container.appendChild(notification);
                        
                        // Remover ap√≥s 4 segundos
                        setTimeout(() => {
                            notification.style.animation = 'slideOut 0.5s ease-in forwards';
                            setTimeout(() => {
                                if (container.contains(notification)) {
                                    container.removeChild(notification);
                                }
                            }, 500);
                        }, 4000);
                    }

                    function getOrCreateNotificationContainer() {
                        let container = document.getElementById('notification-container');
                        if (!container) {
                            container = document.createElement('div');
                            container.id = 'notification-container';
                            container.style.cssText = `
                                position: fixed;
                                top: 20px;
                                right: 20px;
                                z-index: 10000;
                                max-width: 400px;
                            `;
                            document.body.appendChild(container);
                        }
                        return container;
                    }

                    function showSuccessOverlay(title, message) {
                        try {
                            const overlay = getOrCreateSuccessOverlay();
                            if (!overlay) {
                                console.error('N√£o foi poss√≠vel criar o overlay');
                                return;
                            }
                            
                            const titleEl = overlay.querySelector('#success-title');
                            const messageEl = overlay.querySelector('#success-message');
                            const contentEl = overlay.querySelector('.success-content');
                            
                            if (!titleEl || !messageEl || !contentEl) {
                                console.error('Elementos do overlay n√£o encontrados');
                                return;
                            }
                            
                            titleEl.textContent = title;
                            messageEl.textContent = message;
                            
                            overlay.style.display = 'flex';
                            overlay.offsetHeight; // Force reflow
                            
                            // Aplicar estilos de show manualmente
                            overlay.style.opacity = '1';
                            contentEl.style.transform = 'scale(1)';
                            
                            // Fechar automaticamente ap√≥s 3 segundos
                            setTimeout(() => {
                                if (overlay && contentEl) {
                                    // Aplicar estilos de hide manualmente
                                    overlay.style.opacity = '0';
                                    contentEl.style.transform = 'scale(0.7)';
                                    setTimeout(() => {
                                        if (overlay) {
                                            overlay.style.display = 'none';
                                        }
                                    }, 300);
                                }
                            }, 3000);
                            
                            // Fechar ao clicar
                            overlay.onclick = () => {
                                if (overlay && contentEl) {
                                    overlay.style.opacity = '0';
                                    contentEl.style.transform = 'scale(0.7)';
                                    setTimeout(() => {
                                        if (overlay) {
                                            overlay.style.display = 'none';
                                        }
                                    }, 300);
                                }
                            };
                        } catch (error) {
                            console.error('Erro ao mostrar overlay de sucesso:', error);
                        }
                    }

                    function getOrCreateSuccessOverlay() {
                        let overlay = document.getElementById('success-overlay');
                        if (!overlay) {
                            overlay = document.createElement('div');
                            overlay.id = 'success-overlay';
                            overlay.innerHTML = `
                                <div class="success-content">
                                    <div class="success-icon">‚úÖ</div>
                                    <h3 id="success-title">Opera√ß√£o Conclu√≠da!</h3>
                                    <p id="success-message">A execu√ß√£o foi realizada com sucesso.</p>
                                    <div class="success-animation">
                                        <div class="pulse-ring"></div>
                                        <div class="pulse-ring delay-1"></div>
                                        <div class="pulse-ring delay-2"></div>
                                    </div>
                                </div>
                            `;
                            
                            overlay.style.cssText = `
                                position: fixed;
                                top: 0;
                                left: 0;
                                right: 0;
                                bottom: 0;
                                background: rgba(0, 0, 0, 0.8);
                                backdrop-filter: blur(10px);
                                display: none;
                                align-items: center;
                                justify-content: center;
                                z-index: 10001;
                                opacity: 0;
                                transition: all 0.3s ease;
                            `;
                            
                            const content = overlay.querySelector('.success-content');
                            content.style.cssText = `
                                background: white;
                                border-radius: 20px;
                                padding: 50px;
                                text-align: center;
                                max-width: 400px;
                                position: relative;
                                transform: scale(0.7);
                                transition: transform 0.3s ease;
                            `;
                            
                            const icon = overlay.querySelector('.success-icon');
                            icon.style.cssText = `
                                font-size: 4rem;
                                margin-bottom: 20px;
                                animation: bounce 0.6s ease-out;
                            `;
                            
                            const title = overlay.querySelector('#success-title');
                            title.style.cssText = `
                                color: #28a745;
                                margin-bottom: 15px;
                                font-size: 1.5rem;
                                font-weight: 600;
                            `;
                            
                            const message = overlay.querySelector('#success-message');
                            message.style.cssText = `
                                color: #7f8c8d;
                                margin-bottom: 30px;
                                line-height: 1.5;
                            `;
                            
                            const animation = overlay.querySelector('.success-animation');
                            animation.style.cssText = `
                                position: absolute;
                                top: 50%;
                                left: 50%;
                                transform: translate(-50%, -50%);
                                pointer-events: none;
                            `;
                            
                            document.body.appendChild(overlay);
                        }
                        
                        return overlay;
                    }

                    // Adicionar CSS para anima√ß√µes
                    const style = document.createElement('style');
                    style.textContent = `
                        @keyframes slideIn {
                            to { transform: translateX(0); }
                        }
                        
                        @keyframes slideOut {
                            to { transform: translateX(400px); }
                        }
                        
                        @keyframes progressBar {
                            from { transform: scaleX(1); }
                            to { transform: scaleX(0); }
                        }
                        
                        @keyframes bounce {
                            0%, 20%, 53%, 80%, 100% { transform: translate3d(0,0,0); }
                            40%, 43% { transform: translate3d(0,-30px,0); }
                            70% { transform: translate3d(0,-15px,0); }
                            90% { transform: translate3d(0,-4px,0); }
                        }
                        
                        @keyframes pulse {
                            0% {
                                transform: translate(-50%, -50%) scale(0.5);
                                opacity: 1;
                            }
                            100% {
                                transform: translate(-50%, -50%) scale(2);
                                opacity: 0;
                            }
                        }
                        
                        .pulse-ring {
                            position: absolute;
                            width: 100px;
                            height: 100px;
                            border: 3px solid #28a745;
                            border-radius: 50%;
                            opacity: 0;
                            animation: pulse 2s ease-out infinite;
                        }
                        
                        .pulse-ring.delay-1 {
                            animation-delay: 0.5s;
                        }
                        
                        .pulse-ring.delay-2 {
                            animation-delay: 1s;
                        }
                        
                        .execution-btn {
                            transition: all 0.3s ease;
                            padding: 12px 24px;
                            border: none;
                            border-radius: 8px;
                            font-weight: 600;
                            cursor: pointer;
                            font-size: 0.9rem;
                            margin: 5px;
                        }
                        
                        .execution-btn:hover {
                            transform: translateY(-2px);
                            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
                        }
                    `;
                    document.head.appendChild(style);
                </script>
            </body>
        </html>
        """
        
        return HTMLResponse(html_content)
        
    except Exception as e:
        logger.error(f"Erro no dashboard: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")


@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de do sistema"""
    modules_status = {
        "scraper": "ready" if SCRAPER_AVAILABLE else "not_available",
        "generator": "ready" if GENERATOR_AVAILABLE else "not_available", 
        "review": "ready" if REVIEW_AVAILABLE else "not_available",
        "publisher": "ready" if PUBLISHER_AVAILABLE else "not_available",
        "config": "ready" if CONFIG_AVAILABLE else "not_available",
        "scheduler": "ready" if SCHEDULER_AVAILABLE else "not_available"
    }
    
    # Verificar status do scraper se dispon√≠vel
    if SCRAPER_AVAILABLE:
        try:
            manager = ScraperManager()
            scraper_data = manager.get_scraping_status()
            modules_status["scraper"] = "operational"
            modules_status["scraper_details"] = {
                "urls_configuradas": scraper_data.get("urls_configuradas", 0),
                "produtos_processados": scraper_data.get("produtos_processados", 0)
            }
        except Exception as e:
            modules_status["scraper"] = "error"
            modules_status["scraper_error"] = str(e)
    
    # Verificar status do generator se dispon√≠vel
    if GENERATOR_AVAILABLE:
        try:
            gen_manager = GeneratorManager()
            gen_stats = gen_manager.get_stats()
            modules_status["generator"] = "operational"
            modules_status["generator_details"] = {
                "simulation_mode": gen_stats.get("simulation_mode", True),
                "articles_generated": gen_stats.get("total_articles_in_memory", 0),
                "total_generated": gen_stats["manager_stats"].get("total_generated", 0)
            }
        except Exception as e:
            modules_status["generator"] = "error"
            modules_status["generator_error"] = str(e)
    
    # Verificar status do review se dispon√≠vel
    if REVIEW_AVAILABLE:
        try:
            review_manager = ReviewManager()
            review_stats = review_manager.get_statistics()
            modules_status["review"] = "operational"
            modules_status["review_details"] = {
                "total_articles": review_stats.get("total_artigos", 0),
                "pending_review": review_stats.get("pendentes", 0),
                "approved": review_stats.get("aprovados", 0),
                "rejected": review_stats.get("rejeitados", 0)
            }
        except Exception as e:
            modules_status["review"] = "error"
            modules_status["review_error"] = str(e)
    
    # Verificar status do publisher se dispon√≠vel
    if PUBLISHER_AVAILABLE:
        try:
            pub_manager = PublicationManager()
            pub_stats = pub_manager.get_publication_statistics()
            modules_status["publisher"] = "operational"
            modules_status["publisher_details"] = {
                "total_publications": pub_stats.get("total_publications", 0),
                "published": pub_stats.get("published", 0),
                "failed": pub_stats.get("failed", 0),
                "pending": pub_stats.get("pending", 0),
                "wordpress_configured": pub_stats.get("wordpress_configured", False)
            }
        except Exception as e:
            modules_status["publisher"] = "error"
            modules_status["publisher_error"] = str(e)
    
    # Adicionar status do config
    if CONFIG_AVAILABLE:
        try:
            config_manager = ConfigManager()
            modules_status["config"] = {
                "status": "operational",
                "statistics": config_manager.get_statistics()
            }
        except Exception as e:
            modules_status["config"] = {'status': 'error', 'error': str(e)}
    else:
        modules_status["config"] = {'status': 'not_available'}
    
    # Verificar status do scheduler se dispon√≠vel
    if SCHEDULER_AVAILABLE and 'scheduler_manager' in globals():
        try:
            scheduler_status = scheduler_manager.get_status()
            modules_status["scheduler"] = {
                "status": "operational",
                "is_running": scheduler_status.get("is_running", False),
                "jobs_count": scheduler_status.get("jobs_count", 0),
                "recent_executions": len(scheduler_status.get("recent_executions", [])),
                "details": scheduler_status
            }
        except Exception as e:
            modules_status["scheduler"] = {'status': 'error', 'error': str(e)}
    else:
        modules_status["scheduler"] = {'status': 'not_available' if not SCHEDULER_AVAILABLE else 'not_initialized'}
    
    return {
        "status": "healthy",
        "app_name": APP_NAME,
        "version": APP_VERSION,
        "port": PORT,
        "modules": modules_status
    }


@app.get("/api-docs", response_class=HTMLResponse)
async def api_documentation():
    """Documenta√ß√£o interativa da API com campo de busca"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html lang="pt-BR">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Documenta√ß√£o da API - Sistema SEO</title>
        <link href="https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            
            :root {
                --bg-primary: #0a0a0a;
                --bg-secondary: #1a1a1a;
                --bg-tertiary: #2a2a2a;
                --text-primary: #ffffff;
                --text-secondary: #a1a1aa;
                --accent-blue: #007aff;
                --accent-green: #34c759;
                --accent-orange: #ff9500;
                --accent-red: #ff3b30;
                --accent-purple: #af52de;
                --glass-bg: rgba(255, 255, 255, 0.05);
                --glass-border: rgba(255, 255, 255, 0.1);
            }
            
            body {
                font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
                background: var(--bg-primary);
                color: var(--text-primary);
                line-height: 1.6;
            }
            
            .header {
                background: linear-gradient(135deg, var(--bg-secondary), var(--bg-tertiary));
                padding: 30px 0;
                text-align: center;
                border-bottom: 1px solid var(--glass-border);
            }
            
            .header h1 {
                font-size: 2.5rem;
                font-weight: 700;
                background: linear-gradient(135deg, var(--accent-blue), var(--accent-green));
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 10px;
            }
            
            .header p {
                color: var(--text-secondary);
                font-size: 1.1rem;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 40px 20px;
            }
            
            .search-section {
                background: var(--glass-bg);
                backdrop-filter: blur(20px);
                border: 1px solid var(--glass-border);
                border-radius: 16px;
                padding: 30px;
                margin-bottom: 40px;
                position: sticky;
                top: 20px;
                z-index: 100;
            }
            
            .search-box {
                position: relative;
                margin-bottom: 20px;
            }
            
            .search-input {
                width: 100%;
                padding: 15px 50px 15px 20px;
                background: var(--bg-tertiary);
                border: 1px solid var(--glass-border);
                border-radius: 12px;
                color: var(--text-primary);
                font-size: 1rem;
                transition: all 0.3s ease;
            }
            
            .search-input:focus {
                outline: none;
                border-color: var(--accent-blue);
                box-shadow: 0 0 0 3px rgba(0, 122, 255, 0.1);
            }
            
            .search-icon {
                position: absolute;
                right: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: var(--text-secondary);
                font-size: 1.2rem;
            }
            
            .filters {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
            }
            
            .filter-btn {
                padding: 8px 16px;
                background: var(--bg-tertiary);
                border: 1px solid var(--glass-border);
                border-radius: 20px;
                color: var(--text-secondary);
                cursor: pointer;
                transition: all 0.3s ease;
                font-size: 0.9rem;
            }
            
            .filter-btn:hover, .filter-btn.active {
                background: var(--accent-blue);
                color: white;
                border-color: var(--accent-blue);
            }
            
            .stats {
                margin-top: 15px;
                color: var(--text-secondary);
                font-size: 0.9rem;
            }
            
            .modules {
                display: grid;
                gap: 30px;
            }
            
            .module {
                background: var(--glass-bg);
                backdrop-filter: blur(20px);
                border: 1px solid var(--glass-border);
                border-radius: 16px;
                padding: 30px;
                transition: all 0.3s ease;
            }
            
            .module:hover {
                transform: translateY(-5px);
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            }
            
            .module-header {
                display: flex;
                align-items: center;
                gap: 15px;
                margin-bottom: 20px;
                padding-bottom: 15px;
                border-bottom: 1px solid var(--glass-border);
            }
            
            .module-icon {
                font-size: 2rem;
            }
            
            .module-title {
                font-size: 1.5rem;
                font-weight: 600;
            }
            
            .module-desc {
                color: var(--text-secondary);
                margin-bottom: 20px;
            }
            
            .endpoints {
                display: grid;
                gap: 15px;
            }
            
            .endpoint {
                background: var(--bg-tertiary);
                border-radius: 12px;
                padding: 20px;
                transition: all 0.3s ease;
                border-left: 4px solid transparent;
            }
            
            .endpoint:hover {
                background: rgba(255, 255, 255, 0.05);
            }
            
            .endpoint.get { border-left-color: var(--accent-blue); }
            .endpoint.post { border-left-color: var(--accent-green); }
            .endpoint.put { border-left-color: var(--accent-orange); }
            .endpoint.delete { border-left-color: var(--accent-red); }
            
            .endpoint-header {
                display: flex;
                align-items: center;
                gap: 15px;
                margin-bottom: 10px;
            }
            
            .method {
                padding: 4px 8px;
                border-radius: 6px;
                font-size: 0.8rem;
                font-weight: 600;
                min-width: 60px;
                text-align: center;
            }
            
            .method.get { background: var(--accent-blue); }
            .method.post { background: var(--accent-green); }
            .method.put { background: var(--accent-orange); }
            .method.delete { background: var(--accent-red); }
            
            .endpoint-path {
                font-family: 'Courier New', monospace;
                font-size: 1rem;
                color: var(--text-primary);
                flex: 1;
            }
            
            .endpoint-desc {
                color: var(--text-secondary);
                font-size: 0.9rem;
            }
            
            .hidden {
                display: none !important;
            }
            
            .no-results {
                text-align: center;
                padding: 60px 20px;
                color: var(--text-secondary);
            }
            
            .no-results h3 {
                font-size: 1.5rem;
                margin-bottom: 10px;
            }
            
            @media (max-width: 768px) {
                .filters {
                    justify-content: center;
                }
                
                .endpoint-header {
                    flex-direction: column;
                    align-items: flex-start;
                    gap: 10px;
                }
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üìö Documenta√ß√£o da API</h1>
            <p>Sistema de Gera√ß√£o Autom√°tica de Conte√∫do SEO</p>
        </div>
        
        <div class="container">
            <div class="search-section">
                <div class="search-box">
                    <input type="text" class="search-input" placeholder="üîç Buscar endpoints, m√≥dulos ou funcionalidades..." id="searchInput">
                    <span class="search-icon">üîç</span>
                </div>
                
                <div class="filters">
                    <button class="filter-btn active" data-filter="all">Todos</button>
                    <button class="filter-btn" data-filter="get">GET</button>
                    <button class="filter-btn" data-filter="post">POST</button>
                    <button class="filter-btn" data-filter="delete">DELETE</button>
                    <button class="filter-btn" data-filter="scraper">Scraper</button>
                    <button class="filter-btn" data-filter="generator">Generator</button>
                    <button class="filter-btn" data-filter="review">Review</button>
                    <button class="filter-btn" data-filter="publisher">Publisher</button>
                    <button class="filter-btn" data-filter="config">Config</button>
                    <button class="filter-btn" data-filter="scheduler">Scheduler</button>
                </div>
                
                <div class="stats">
                    <span id="resultsCount">53 endpoints encontrados</span> | 
                    <a href="/docs" style="color: var(--accent-blue);">Swagger UI</a> | 
                    <a href="/redoc" style="color: var(--accent-blue);">ReDoc</a> |
                    <a href="/" style="color: var(--accent-blue);">‚Üê Dashboard</a>
                </div>
            </div>
            
            <div class="modules" id="modulesContainer">
                <!-- Sistema -->
                <div class="module" data-module="sistema">
                    <div class="module-header">
                        <span class="module-icon">üè†</span>
                        <div>
                            <div class="module-title">Sistema</div>
                            <div class="module-desc">Endpoints principais do sistema</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/" data-description="Dashboard principal dark mode responsivo">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/</span>
                            </div>
                            <div class="endpoint-desc">Dashboard principal do sistema com design dark mode Apple style</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/health" data-description="Verifica√ß√£o de sa√∫de completa do sistema">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/health</span>
                            </div>
                            <div class="endpoint-desc">Health check completo com status de todos os m√≥dulos</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/api-docs" data-description="Documenta√ß√£o interativa com busca">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/api-docs</span>
                            </div>
                            <div class="endpoint-desc">Documenta√ß√£o interativa da API com campo de busca avan√ßado</div>
                        </div>
                    </div>
                </div>
                
                <!-- Scraper -->
                <div class="module" data-module="scraper">
                    <div class="module-header">
                        <span class="module-icon">üï∑Ô∏è</span>
                        <div>
                            <div class="module-title">M√≥dulo Scraper</div>
                            <div class="module-desc">Extra√ß√£o automatizada de produtos Creative C√≥pias</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/scraper" data-description="Status detalhado scraper com estat√≠sticas">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/scraper</span>
                            </div>
                            <div class="endpoint-desc">Status e estat√≠sticas completas do m√≥dulo scraper</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scraper/test" data-description="Testar conex√£o Creative C√≥pias">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scraper/test</span>
                            </div>
                            <div class="endpoint-desc">Teste de conectividade com o site alvo</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scraper/run" data-description="Executar scraping completo background">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scraper/run</span>
                            </div>
                            <div class="endpoint-desc">Scraping completo de todas as categorias em background</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scraper/run-single" data-description="Scraping categoria espec√≠fica">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scraper/run-single</span>
                            </div>
                            <div class="endpoint-desc">Executar scraping de uma categoria espec√≠fica</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/scraper/stats" data-description="Estat√≠sticas produtos processados">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/scraper/stats</span>
                            </div>
                            <div class="endpoint-desc">M√©tricas e estat√≠sticas de produtos processados</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scraper/cleanup" data-description="Limpeza dados antigos cache">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scraper/cleanup</span>
                            </div>
                            <div class="endpoint-desc">Limpeza de dados antigos e cache SQLite</div>
                        </div>
                    </div>
                </div>
                
                <!-- Generator -->
                <div class="module" data-module="generator">
                    <div class="module-header">
                        <span class="module-icon">‚öôÔ∏è</span>
                        <div>
                            <div class="module-title">M√≥dulo Generator</div>
                            <div class="module-desc">Gera√ß√£o IA de conte√∫do SEO otimizado</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/generator" data-description="Status generator OpenAI simula√ß√£o">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/generator</span>
                            </div>
                            <div class="endpoint-desc">Status do gerador com modo OpenAI/simula√ß√£o</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/generator/test" data-description="Teste gera√ß√£o produto fict√≠cio">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/generator/test</span>
                            </div>
                            <div class="endpoint-desc">Teste de gera√ß√£o com produto fict√≠cio para valida√ß√£o</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/generator/generate" data-description="Gerar artigo SEO produto">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/generator/generate</span>
                            </div>
                            <div class="endpoint-desc">Gerar artigo SEO otimizado a partir de dados do produto</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/generator/stats" data-description="Estat√≠sticas artigos gerados templates">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/generator/stats</span>
                            </div>
                            <div class="endpoint-desc">Estat√≠sticas de artigos gerados e templates usados</div>
                        </div>
                    </div>
                </div>
                
                <!-- Review -->
                <div class="module" data-module="review">
                    <div class="module-header">
                        <span class="module-icon">üìù</span>
                        <div>
                            <div class="module-title">Sistema Review</div>
                            <div class="module-desc">Revis√£o e aprova√ß√£o de artigos gerados</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/review" data-description="Status review artigos pendentes">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/review</span>
                            </div>
                            <div class="endpoint-desc">Status do sistema com artigos pendentes/aprovados</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/review/list" data-description="Interface web listagem artigos">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/review/list</span>
                            </div>
                            <div class="endpoint-desc">Interface web dark mode para listagem de artigos</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/review/stats" data-description="Estat√≠sticas sistema revis√£o">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/review/stats</span>
                            </div>
                            <div class="endpoint-desc">Estat√≠sticas completas do sistema de revis√£o</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/review/approved" data-description="Artigos aprovados prontos publica√ß√£o">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/review/approved</span>
                            </div>
                            <div class="endpoint-desc">Lista de artigos aprovados prontos para publica√ß√£o</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/review/{id}" data-description="Visualizar artigo espec√≠fico">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/review/{id}</span>
                            </div>
                            <div class="endpoint-desc">Visualiza√ß√£o detalhada de artigo espec√≠fico</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/review/{id}/edit" data-description="Editor artigo inline">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/review/{id}/edit</span>
                            </div>
                            <div class="endpoint-desc">Interface de edi√ß√£o inline com valida√ß√£o SEO</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/review/{id}/update" data-description="Atualizar dados artigo">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/review/{id}/update</span>
                            </div>
                            <div class="endpoint-desc">Atualizar conte√∫do e metadados do artigo</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/review/{id}/approve" data-description="Aprovar artigo publica√ß√£o">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/review/{id}/approve</span>
                            </div>
                            <div class="endpoint-desc">Aprovar artigo para publica√ß√£o no WordPress</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/review/{id}/reject" data-description="Rejeitar artigo motivo">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/review/{id}/reject</span>
                            </div>
                            <div class="endpoint-desc">Rejeitar artigo com motivo da rejei√ß√£o</div>
                        </div>
                        
                        <div class="endpoint delete" data-path="/review/{id}" data-description="Remover artigo sistema">
                            <div class="endpoint-header">
                                <span class="method delete">DELETE</span>
                                <span class="endpoint-path">/review/{id}</span>
                            </div>
                            <div class="endpoint-desc">Remover artigo permanentemente do sistema</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/review/save-from-generator" data-description="Salvar artigo gerado revis√£o">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/review/save-from-generator</span>
                            </div>
                            <div class="endpoint-desc">Endpoint interno para salvar artigos do Generator</div>
                        </div>
                    </div>
                </div>
                
                <!-- Publisher -->
                <div class="module" data-module="publisher">
                    <div class="module-header">
                        <span class="module-icon">üì§</span>
                        <div>
                            <div class="module-title">M√≥dulo Publisher</div>
                            <div class="module-desc">Publica√ß√£o autom√°tica WordPress REST API</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/publisher" data-description="Status publisher WordPress conex√£o">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/publisher</span>
                            </div>
                            <div class="endpoint-desc">Status e teste de conex√£o com WordPress</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/publisher/test" data-description="Testar conex√£o WordPress API">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/publisher/test</span>
                            </div>
                            <div class="endpoint-desc">Teste de conectividade e autentica√ß√£o WordPress</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/publisher/publish" data-description="Publicar artigo aprovado WordPress">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/publisher/publish</span>
                            </div>
                            <div class="endpoint-desc">Publicar artigo aprovado no WordPress</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/publisher/list" data-description="Listar publica√ß√µes status">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/publisher/list</span>
                            </div>
                            <div class="endpoint-desc">Lista de publica√ß√µes com filtro por status</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/publisher/stats" data-description="Estat√≠sticas publica√ß√µes WordPress">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/publisher/stats</span>
                            </div>
                            <div class="endpoint-desc">Estat√≠sticas de publica√ß√µes e falhas</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/publisher/retry/{id}" data-description="Tentar republicar falha">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/publisher/retry/{id}</span>
                            </div>
                            <div class="endpoint-desc">Retry de publica√ß√£o que falhou</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/publisher/cleanup" data-description="Limpeza registros antigos">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/publisher/cleanup</span>
                            </div>
                            <div class="endpoint-desc">Limpeza de registros antigos de publica√ß√£o</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/publisher/categories" data-description="Categorias WordPress dispon√≠veis">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/publisher/categories</span>
                            </div>
                            <div class="endpoint-desc">Lista todas as categorias do WordPress</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/publisher/tags" data-description="Tags WordPress dispon√≠veis">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/publisher/tags</span>
                            </div>
                            <div class="endpoint-desc">Lista todas as tags do WordPress</div>
                        </div>
                    </div>
                </div>
                
                <!-- Config -->
                <div class="module" data-module="config">
                    <div class="module-header">
                        <span class="module-icon">‚öôÔ∏è</span>
                        <div>
                            <div class="module-title">M√≥dulo Config</div>
                            <div class="module-desc">Configura√ß√µes centralizadas com backup</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/config" data-description="Painel configura√ß√µes dark mode">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/config</span>
                            </div>
                            <div class="endpoint-desc">Interface web de configura√ß√µes com design dark mode</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/config/data" data-description="Obter todas configura√ß√µes">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/config/data</span>
                            </div>
                            <div class="endpoint-desc">Retorna todas as configura√ß√µes do sistema</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/config/update" data-description="Atualizar configura√ß√µes sistema">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/config/update</span>
                            </div>
                            <div class="endpoint-desc">Atualizar configura√ß√µes do sistema</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/config/export" data-description="Exportar configura√ß√µes JSON">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/config/export</span>
                            </div>
                            <div class="endpoint-desc">Exportar todas as configura√ß√µes em JSON</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/config/import" data-description="Importar configura√ß√µes backup">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/config/import</span>
                            </div>
                            <div class="endpoint-desc">Importar configura√ß√µes de backup</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/config/backup" data-description="Criar backup configura√ß√µes">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/config/backup</span>
                            </div>
                            <div class="endpoint-desc">Criar backup autom√°tico das configura√ß√µes</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/config/stats" data-description="Estat√≠sticas configura√ß√µes URLs">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/config/stats</span>
                            </div>
                            <div class="endpoint-desc">Estat√≠sticas de configura√ß√µes e URLs monitoradas</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/config/urls/add" data-description="Adicionar URL monitorada">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/config/urls/add</span>
                            </div>
                            <div class="endpoint-desc">Adicionar nova URL para monitoramento</div>
                        </div>
                        
                        <div class="endpoint delete" data-path="/config/urls/{id}" data-description="Remover URL monitorada">
                            <div class="endpoint-header">
                                <span class="method delete">DELETE</span>
                                <span class="endpoint-path">/config/urls/{id}</span>
                            </div>
                            <div class="endpoint-desc">Remover URL do monitoramento</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/config/templates/add" data-description="Adicionar template conte√∫do">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/config/templates/add</span>
                            </div>
                            <div class="endpoint-desc">Adicionar novo template de conte√∫do personalizado</div>
                        </div>
                    </div>
                </div>
                
                <!-- Scheduler -->
                <div class="module" data-module="scheduler">
                    <div class="module-header">
                        <span class="module-icon">‚è∞</span>
                        <div>
                            <div class="module-title">Scheduler</div>
                            <div class="module-desc">Automa√ß√£o semanal domingos 10h</div>
                        </div>
                    </div>
                    
                    <div class="endpoints">
                        <div class="endpoint get" data-path="/scheduler" data-description="Status agendamento pr√≥ximas execu√ß√µes">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/scheduler</span>
                            </div>
                            <div class="endpoint-desc">Status e pr√≥ximas execu√ß√µes do agendador semanal</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/scheduler/status" data-description="Status detalhado jobs ativos">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/scheduler/status</span>
                            </div>
                            <div class="endpoint-desc">Status detalhado de todos os jobs configurados</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scheduler/run" data-description="Executar fluxo completo manual">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scheduler/run</span>
                            </div>
                            <div class="endpoint-desc">Execu√ß√£o manual do fluxo completo (scraping + gera√ß√£o)</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scheduler/pause" data-description="Pausar todos jobs">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scheduler/pause</span>
                            </div>
                            <div class="endpoint-desc">Pausar temporariamente todos os jobs agendados</div>
                        </div>
                        
                        <div class="endpoint post" data-path="/scheduler/resume" data-description="Reativar todos jobs">
                            <div class="endpoint-header">
                                <span class="method post">POST</span>
                                <span class="endpoint-path">/scheduler/resume</span>
                            </div>
                            <div class="endpoint-desc">Reativar execu√ß√£o de todos os jobs pausados</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/scheduler/next" data-description="Pr√≥ximas execu√ß√µes 24h">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/scheduler/next</span>
                            </div>
                            <div class="endpoint-desc">Lista pr√≥ximas execu√ß√µes nas pr√≥ximas 24 horas</div>
                        </div>
                        
                        <div class="endpoint get" data-path="/scheduler/history" data-description="Hist√≥rico execu√ß√µes recentes">
                            <div class="endpoint-header">
                                <span class="method get">GET</span>
                                <span class="endpoint-path">/scheduler/history</span>
                            </div>
                            <div class="endpoint-desc">Hist√≥rico das execu√ß√µes mais recentes</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="no-results hidden" id="noResults">
                <h3>üîç Nenhum resultado encontrado</h3>
                <p>Tente ajustar sua busca ou filtros</p>
            </div>
        </div>
        
        <script>
            const searchInput = document.getElementById('searchInput');
            const filterBtns = document.querySelectorAll('.filter-btn');
            const modules = document.querySelectorAll('.module');
            const endpoints = document.querySelectorAll('.endpoint');
            const resultsCount = document.getElementById('resultsCount');
            const noResults = document.getElementById('noResults');
            const modulesContainer = document.getElementById('modulesContainer');
            
            let currentFilter = 'all';
            let currentSearch = '';
            
            // Fun√ß√£o de busca
            function performSearch() {
                const searchTerm = searchInput.value.toLowerCase();
                currentSearch = searchTerm;
                filterContent();
            }
            
            // Fun√ß√£o de filtro
            function filterContent() {
                let visibleCount = 0;
                
                modules.forEach(module => {
                    const moduleData = module.dataset.module.toLowerCase();
                    const moduleText = module.textContent.toLowerCase();
                    const moduleEndpoints = module.querySelectorAll('.endpoint');
                    
                    let hasVisibleEndpoints = false;
                    
                    moduleEndpoints.forEach(endpoint => {
                        const method = endpoint.querySelector('.method').textContent.toLowerCase();
                        const path = endpoint.dataset.path.toLowerCase();
                        const description = endpoint.dataset.description.toLowerCase();
                        const endpointText = endpoint.textContent.toLowerCase();
                        
                        // Verificar filtro de m√©todo
                        const matchesMethodFilter = currentFilter === 'all' || 
                                                  method === currentFilter || 
                                                  moduleData === currentFilter;
                        
                        // Verificar busca
                        const matchesSearch = currentSearch === '' ||
                                            path.includes(currentSearch) ||
                                            description.includes(currentSearch) ||
                                            endpointText.includes(currentSearch) ||
                                            moduleData.includes(currentSearch);
                        
                        if (matchesMethodFilter && matchesSearch) {
                            endpoint.style.display = 'block';
                            hasVisibleEndpoints = true;
                            visibleCount++;
                        } else {
                            endpoint.style.display = 'none';
                        }
                    });
                    
                    // Mostrar/ocultar m√≥dulo baseado nos endpoints vis√≠veis
                    if (hasVisibleEndpoints) {
                        module.style.display = 'block';
                    } else {
                        module.style.display = 'none';
                    }
                });
                
                // Atualizar contador e mostrar/ocultar "sem resultados"
                resultsCount.textContent = `${visibleCount} endpoints encontrados`;
                
                if (visibleCount === 0) {
                    noResults.classList.remove('hidden');
                    modulesContainer.style.display = 'none';
                } else {
                    noResults.classList.add('hidden');
                    modulesContainer.style.display = 'grid';
                }
            }
            
            // Event listeners
            searchInput.addEventListener('input', performSearch);
            
            filterBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    // Remover classe active de todos os bot√µes
                    filterBtns.forEach(b => b.classList.remove('active'));
                    // Adicionar classe active ao bot√£o clicado
                    btn.classList.add('active');
                    // Atualizar filtro atual
                    currentFilter = btn.dataset.filter;
                    // Aplicar filtro
                    filterContent();
                });
            });
            
            // Busca em tempo real com debounce
            let searchTimeout;
            searchInput.addEventListener('input', () => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(performSearch, 300);
            });
            
            // Atalhos de teclado
            document.addEventListener('keydown', (e) => {
                // Ctrl/Cmd + K para focar na busca
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    searchInput.focus();
                }
                
                // Escape para limpar busca
                if (e.key === 'Escape' && document.activeElement === searchInput) {
                    searchInput.value = '';
                    performSearch();
                }
            });
            
            // Inicializar contadores
            filterContent();
        </script>
    </body>
    </html>
    """)


# =====================================================
# ROTAS DO M√ìDULO SCRAPER
# =====================================================

@app.get("/scraper")
async def scraper_status():
    """Status detalhado do m√≥dulo de scraping"""
    if not SCRAPER_AVAILABLE:
        return {
            "module": "scraper",
            "status": "not_available",
            "message": "M√≥dulo scraper n√£o foi importado corretamente",
            "dependencies": ["beautifulsoup4", "requests", "lxml"]
        }
    
    try:
        manager = ScraperManager()
        status_data = manager.get_scraping_status()
        
        return {
            "module": "scraper",
            "status": "ready",
            "description": "M√≥dulo para extrair produtos do Creative C√≥pias",
            "data": status_data,
            "actions": {
                "test_connection": "/scraper/test",
                "run_full_scraping": "/scraper/run",
                "run_single_category": "/scraper/run-single",
                "get_stats": "/scraper/stats",
                "cleanup": "/scraper/cleanup"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do scraper: {e}")
        return {
            "module": "scraper",
            "status": "error",
            "message": str(e)
        }

@app.post("/scraper/test")
async def test_scraper_connection(request: ScrapingRequest = None):
    """Testa conex√£o com o site Creative C√≥pias"""
    if not SCRAPER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo scraper n√£o dispon√≠vel")
    
    try:
        manager = ScraperManager()
        test_url = request.url if request and request.url else None
        result = manager.test_connection(test_url)
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de conex√£o: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/scraper/run")
async def run_full_scraping(background_tasks: BackgroundTasks):
    """Executa scraping completo de todas as categorias"""
    if not SCRAPER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo scraper n√£o dispon√≠vel")
    
    try:
        # Executar scraping em background para n√£o bloquear a API
        def run_scraping():
            manager = ScraperManager()
            return manager.run_full_scraping()
        
        background_tasks.add_task(run_scraping)
        
        return {
            "status": "started",
            "message": "Scraping completo iniciado em background",
            "check_status": "/scraper/stats"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar scraping: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/scraper/run-single")
async def run_single_category_scraping(request: ScrapingRequest):
    """Executa scraping de uma categoria espec√≠fica"""
    if not SCRAPER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo scraper n√£o dispon√≠vel")
    
    if not request.url:
        raise HTTPException(status_code=400, detail="URL √© obrigat√≥ria")
    
    try:
        manager = ScraperManager()
        result = manager.run_single_category_scraping(request.url)
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro no scraping da categoria: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/scraper/stats")
async def get_scraper_stats():
    """Retorna estat√≠sticas do m√≥dulo scraper"""
    if not SCRAPER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo scraper n√£o dispon√≠vel")
    
    try:
        manager = ScraperManager()
        stats = manager.get_scraping_status()
        
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/scraper/cleanup")
async def cleanup_scraper_data():
    """Limpa dados antigos do scraper"""
    if not SCRAPER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo scraper n√£o dispon√≠vel")
    
    try:
        manager = ScraperManager()
        result = manager.cleanup_old_data()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro na limpeza: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =====================================================
# ROTAS DO M√ìDULO GENERATOR
# =====================================================

@app.get("/generator")
async def generator_status():
    """Status detalhado do m√≥dulo de gera√ß√£o de conte√∫do"""
    if not GENERATOR_AVAILABLE:
        return {
            "module": "generator",
            "status": "not_available",
            "message": "M√≥dulo generator n√£o foi importado corretamente",
            "dependencies": ["openai", "loguru"]
        }
    
    try:
        manager = GeneratorManager()
        status_data = manager.get_stats()
        
        return {
            "module": "generator",
            "status": "ready",
            "description": "M√≥dulo para gerar artigos SEO com IA",
            "data": status_data,
            "actions": {
                "test_generation": "/generator/test",
                "generate_from_product": "/generator/generate",
                "get_stats": "/generator/stats"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do generator: {e}")
        return {
            "module": "generator",
            "status": "error",
            "message": str(e)
        }

@app.post("/generator/test")
async def test_generator():
    """Testa gera√ß√£o de conte√∫do com produto fict√≠cio"""
    if not GENERATOR_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo generator n√£o dispon√≠vel")
    
    try:
        manager = GeneratorManager()
        result = manager.test_generation()
        
        if result:
            return {
                "status": "success",
                "message": "Teste de gera√ß√£o bem-sucedido",
                "article": result
            }
        else:
            return {
                "status": "failed",
                "message": "Falha no teste de gera√ß√£o"
            }
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste de gera√ß√£o: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/generator/generate")
async def generate_article(request: GenerationRequest):
    """Gera artigo a partir de dados de produto"""
    if not GENERATOR_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo generator n√£o dispon√≠vel")
    
    if not request.product_data and not request.product_id:
        raise HTTPException(status_code=400, detail="product_data ou product_id √© obrigat√≥rio")
    
    try:
        manager = GeneratorManager()
        
        # Se foi fornecido product_id, buscar dados do scraper
        if request.product_id and not request.product_data:
            # TODO: Integrar com scraper para buscar produto por ID
            raise HTTPException(status_code=400, detail="Integra√ß√£o com scraper ainda n√£o implementada. Use product_data.")
        
        # Gerar artigo
        article = manager.generate_article_from_product(
            product=request.product_data,
            custom_keywords=request.custom_keywords,
            custom_instructions=request.custom_instructions,
            tone=request.tone
        )
        
        if article:
            return {
                "status": "success",
                "article": article
            }
        else:
            return {
                "status": "failed",
                "message": "Falha na gera√ß√£o do artigo"
            }
        
    except Exception as e:
        logger.error(f"‚ùå Erro na gera√ß√£o do artigo: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/generator/stats")
async def get_generator_stats():
    """Retorna estat√≠sticas do m√≥dulo generator"""
    if not GENERATOR_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo generator n√£o dispon√≠vel")
    
    try:
        manager = GeneratorManager()
        stats = manager.get_stats()
        return stats
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =====================================================
# ROTAS DO M√ìDULO REVIEW
# =====================================================

@app.get("/review")
async def review_status():
    """Status detalhado do m√≥dulo de revis√£o"""
    if not REVIEW_AVAILABLE:
        return {
            "module": "review",
            "status": "not_available",
            "message": "M√≥dulo review n√£o foi importado corretamente",
            "dependencies": ["sqlite3", "loguru"]
        }
    
    try:
        manager = ReviewManager()
        status_data = manager.get_statistics()
        
        return {
            "module": "review",
            "status": "ready",
            "description": "Sistema de revis√£o de artigos com interface web",
            "data": status_data,
            "actions": {
                "list_articles": "/review/list",
                "view_article": "/review/{id}",
                "edit_article": "/review/{id}/edit",
                "approve_article": "/review/{id}/approve",
                "reject_article": "/review/{id}/reject",
                "get_stats": "/review/stats",
                "approved_articles": "/review/approved"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do review: {e}")
        return {
            "module": "review",
            "status": "error",
            "message": str(e)
        }

@app.get("/review/list", response_class=HTMLResponse)
async def review_list_page(status: str = None):
    """Interface web para listagem de artigos"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        articles = review_manager.list_articles(status=status, limit=50)
        stats = review_manager.get_statistics()
        
        if not templates:
            # Fallback para JSON se templates n√£o dispon√≠veis
            return JSONResponse({
                "articles": articles,
                "stats": stats,
                "current_status": status
            })
        
        return templates.TemplateResponse("review_list.html", {
            "request": {},
            "articles": articles,
            "stats": stats,
            "current_status": status,
            "app_name": APP_NAME
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro na listagem de artigos: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/stats")
async def review_statistics():
    """Estat√≠sticas do sistema de revis√£o"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        stats = review_manager.get_statistics()
        
        return JSONResponse({
            "success": True,
            "statistics": stats,
            "module": "review"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas de revis√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/approved")
async def review_approved_articles():
    """Listar artigos aprovados para publica√ß√£o"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        approved_articles = review_manager.get_approved_articles_for_publishing()
        
        return JSONResponse({
            "success": True,
            "approved_articles": approved_articles,
            "count": len(approved_articles)
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao listar artigos aprovados: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/articles")
async def get_review_articles(status: str = None, limit: int = 50):
    """Retornar artigos para a interface em formato JSON"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        articles = review_manager.list_articles(status=status, limit=limit)
        
        # Garantir formata√ß√£o correta das datas para JSON
        for article in articles:
            # Corrigir encoding e garantir que campos existam
            article_dict = dict(article)
            
            # Corrigir encoding e garantir que campos existam
            article_dict['titulo'] = article_dict.get('titulo') or 'T√≠tulo n√£o dispon√≠vel'
            article_dict['conteudo'] = article_dict.get('conteudo') or 'Conte√∫do n√£o foi gerado ou est√° vazio'
            article_dict['status'] = article_dict.get('status') or 'pendente'
            article_dict['meta_descricao'] = article_dict.get('meta_descricao') or ''
            article_dict['slug'] = article_dict.get('slug') or ''
            article_dict['tags'] = article_dict.get('tags') or []
            
            # Garantir que datas sejam strings
            if 'data_criacao' in article_dict and article_dict['data_criacao']:
                article_dict['data_criacao'] = str(article_dict['data_criacao'])
            
            if 'data_revisao' in article_dict and article_dict['data_revisao']:
                article_dict['data_revisao'] = str(article_dict['data_revisao'])
        
        return JSONResponse({
            "success": True,
            "articles": articles,
            "count": len(articles),
            "status_filter": status
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter artigos: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/{article_id}")
async def review_article_view(article_id: int):
    """Visualizar artigo espec√≠fico"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        article = review_manager.get_article(article_id)
        
        if not article:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        # Converter para dict simples
        article_dict = dict(article)
        
        # Garantir campos b√°sicos
        article_dict['titulo'] = article_dict.get('titulo') or 'T√≠tulo n√£o dispon√≠vel'
        article_dict['conteudo'] = article_dict.get('conteudo') or 'Conte√∫do n√£o foi gerado ou est√° vazio'
        article_dict['status'] = article_dict.get('status') or 'pendente'
        article_dict['meta_descricao'] = article_dict.get('meta_descricao') or ''
        article_dict['slug'] = article_dict.get('slug') or ''
        article_dict['tags'] = article_dict.get('tags') or []
        
        # Sempre retornar JSON para evitar problemas com templates
        return JSONResponse(article_dict, media_type="application/json; charset=utf-8")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar artigo {article_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/{article_id}/edit", response_class=HTMLResponse)
async def review_article_edit(article_id: int):
    """Interface de edi√ß√£o de artigo"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        article = review_manager.get_article(article_id)
        
        if not article:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        if not templates:
            return JSONResponse({
                "article": article,
                "edit_mode": True,
                "message": "Use a API /review/{id}/update para editar via JSON"
            })
        
        return templates.TemplateResponse("review_article.html", {
            "request": {},
            "article": article,
            "is_edit_mode": True
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar editor para artigo {article_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.post("/review/{article_id}/update")
async def review_article_update(article_id: int, request: ReviewRequest):
    """Atualizar dados do artigo"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        
        # Converter request para dict, removendo valores None
        updates = {k: v for k, v in request.dict().items() if v is not None}
        
        if not updates:
            raise HTTPException(status_code=400, detail="Nenhum campo v√°lido para atualizar")
        
        success = review_manager.update_article(article_id, updates, "API User")
        
        if not success:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        # Retornar artigo atualizado
        updated_article = review_manager.get_article(article_id)
        
        return JSONResponse({
            "success": True,
            "message": "Artigo atualizado com sucesso",
            "article": updated_article
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar artigo {article_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.post("/review/{article_id}/approve")
async def review_article_approve(article_id: int, request: ReviewActionRequest):
    """Aprovar artigo para publica√ß√£o"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        
        success = review_manager.approve_article(
            article_id, 
            request.reviewer, 
            request.comment
        )
        
        if not success:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        return JSONResponse({
            "success": True,
            "message": f"Artigo {article_id} aprovado com sucesso",
            "action": "approved",
            "reviewer": request.reviewer
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao aprovar artigo {article_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.post("/review/{article_id}/reject")
async def review_article_reject(article_id: int, request: ReviewActionRequest):
    """Rejeitar artigo"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        if not request.comment:
            raise HTTPException(status_code=400, detail="Motivo da rejei√ß√£o √© obrigat√≥rio")
        
        review_manager = ReviewManager()
        
        success = review_manager.reject_article(
            article_id, 
            request.comment,  # Motivo da rejei√ß√£o
            request.reviewer
        )
        
        if not success:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        return JSONResponse({
            "success": True,
            "message": f"Artigo {article_id} rejeitado",
            "action": "rejected",
            "reason": request.comment,
            "reviewer": request.reviewer
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao rejeitar artigo {article_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.delete("/review/{article_id}")
async def review_delete_article(article_id: int):
    """Remover artigo do sistema"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        success = review_manager.delete_article(article_id, "API User")
        
        if not success:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        return JSONResponse({
            "success": True,
            "message": f"Artigo {article_id} removido com sucesso"
        })
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao remover artigo {article_id}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.post("/review/save-from-generator")
async def review_save_from_generator(article_data: dict):
    """Salvar artigo gerado para revis√£o (usado pelo Generator)"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        article_id = review_manager.save_article_for_review(article_data)
        
        return JSONResponse({
            "success": True,
            "message": "Artigo salvo para revis√£o",
            "article_id": article_id,
            "review_url": f"/review/{article_id}"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar artigo para revis√£o: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/api/list")
async def get_review_articles_api(status: str = None, limit: int = 50):
    """Endpoint API para listar artigos - interface amig√°vel"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        articles = review_manager.list_articles(status=status, limit=limit)
        
        # Garantir formata√ß√£o correta das datas para JSON
        formatted_articles = []
        for article in articles:
            formatted_article = dict(article)
            
            # Corrigir encoding e garantir que campos existam
            formatted_article['titulo'] = formatted_article.get('titulo') or 'T√≠tulo n√£o dispon√≠vel'
            formatted_article['conteudo'] = formatted_article.get('conteudo') or 'Conte√∫do n√£o foi gerado ou est√° vazio'
            formatted_article['status'] = formatted_article.get('status') or 'pendente'
            formatted_article['meta_descricao'] = formatted_article.get('meta_descricao') or ''
            formatted_article['slug'] = formatted_article.get('slug') or ''
            formatted_article['tags'] = formatted_article.get('tags') or []
            
            # Garantir que datas sejam strings
            if 'data_criacao' in formatted_article and formatted_article['data_criacao']:
                formatted_article['data_criacao'] = str(formatted_article['data_criacao'])
            
            if 'data_revisao' in formatted_article and formatted_article['data_revisao']:
                formatted_article['data_revisao'] = str(formatted_article['data_revisao'])
            
            # Garantir que ID existe
            if 'id' not in formatted_article or not formatted_article['id']:
                logger.warning(f"Artigo sem ID encontrado: {formatted_article}")
                continue
            
            formatted_articles.append(formatted_article)
        
        return JSONResponse({
            "success": True,
            "articles": formatted_articles,
            "count": len(formatted_articles),
            "status_filter": status
        }, media_type="application/json; charset=utf-8")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter artigos: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")

@app.get("/review/{article_id}/test")
async def test_review_article(article_id: int):
    """Endpoint de teste para debug"""
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo Review n√£o dispon√≠vel")
    
    try:
        review_manager = ReviewManager()
        article = review_manager.get_article(article_id)
        
        if not article:
            return {"error": "Artigo n√£o encontrado"}
        
        # Retornar dados b√°sicos
        return {
            "success": True,
            "id": article.get('id'),
            "titulo": article.get('titulo'),
            "has_content": bool(article.get('conteudo')),
            "content_length": len(str(article.get('conteudo', ''))),
            "data_criacao": str(article.get('data_criacao')),
            "data_criacao_type": str(type(article.get('data_criacao')))
        }
        
    except Exception as e:
        return {"error": str(e), "type": str(type(e))}


# =====================================================
# ROTAS DO M√ìDULO PUBLISHER
# =====================================================

@app.get("/publisher")
async def publisher_status():
    """Status detalhado do m√≥dulo de publica√ß√£o"""
    if not PUBLISHER_AVAILABLE:
        return {
            "module": "publisher",
            "status": "not_available",
            "message": "M√≥dulo publisher n√£o foi importado corretamente",
            "dependencies": ["requests", "python-dotenv"]
        }
    
    try:
        manager = PublicationManager()
        status_data = manager.get_publication_statistics()
        
        # Testar conex√£o WordPress
        wp_test = manager.test_wordpress_connection()
        
        return {
            "module": "publisher",
            "status": "ready",
            "description": "M√≥dulo para publica√ß√£o autom√°tica no WordPress",
            "data": status_data,
            "wordpress": wp_test,
            "actions": {
                "test_wordpress": "/publisher/test",
                "publish_article": "/publisher/publish",
                "list_publications": "/publisher/list",
                "get_stats": "/publisher/stats"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do publisher: {e}")
        return {
            "module": "publisher",
            "status": "error",
            "message": str(e)
        }

@app.post("/publisher/test")
async def test_wordpress_connection():
    """Testa conex√£o com WordPress"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        result = manager.test_wordpress_connection()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste WordPress: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/publisher/publish")
async def publish_article(request: PublicationRequest):
    """Publica artigo aprovado no WordPress"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    if not REVIEW_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo review necess√°rio para buscar artigo")
    
    try:
        # Buscar artigo no sistema de revis√£o
        review_manager = ReviewManager()
        article = review_manager.get_article(request.article_id)
        
        if not article:
            raise HTTPException(status_code=404, detail="Artigo n√£o encontrado")
        
        if article.get('status') != 'aprovado':
            raise HTTPException(status_code=400, detail="Apenas artigos aprovados podem ser publicados")
        
        # Publicar artigo
        pub_manager = PublicationManager()
        
        scheduled_date = None
        if request.scheduled_date:
            try:
                scheduled_date = datetime.fromisoformat(request.scheduled_date.replace('Z', '+00:00'))
            except:
                raise HTTPException(status_code=400, detail="Formato de data inv√°lido. Use ISO format.")
        
        result = pub_manager.publish_article(
            article_data=article,
            publish_immediately=request.publish_immediately,
            scheduled_date=scheduled_date
        )
        
        if result['success']:
            # Marcar artigo como publicado no sistema de revis√£o
            if request.publish_immediately:
                review_manager.mark_as_published(
                    request.article_id, 
                    result.get('wp_url')
                )
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao publicar artigo: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/publisher/list")
async def list_publications(status: str = None, limit: int = 50):
    """Lista publica√ß√µes"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        publications = manager.list_publications(status=status, limit=limit)
        
        return {
            "success": True,
            "publications": publications,
            "count": len(publications),
            "status_filter": status
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao listar publica√ß√µes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/publisher/stats")
async def get_publisher_stats():
    """Retorna estat√≠sticas do m√≥dulo publisher"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        stats = manager.get_publication_statistics()
        
        return {
            "success": True,
            "statistics": stats,
            "module": "publisher"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/publisher/retry/{publication_id}")
async def retry_publication(publication_id: int):
    """Tenta republicar artigo que falhou"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        result = manager.retry_failed_publication(publication_id)
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao tentar retry: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/publisher/cleanup")
async def cleanup_publications():
    """Limpa registros antigos de publica√ß√£o"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        removed_count = manager.cleanup_old_publications()
        
        return {
            "success": True,
            "message": f"{removed_count} registros antigos removidos",
            "removed_count": removed_count
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro na limpeza: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/publisher/categories")
async def get_wordpress_categories():
    """Lista categorias do WordPress"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        
        if not manager.wp_client:
            raise HTTPException(status_code=400, detail="WordPress n√£o configurado")
        
        categories = manager.wp_client.get_categories()
        
        return {
            "success": True,
            "categories": categories,
            "count": len(categories)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar categorias: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/publisher/tags")
async def get_wordpress_tags():
    """Lista tags do WordPress"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        
        if not manager.wp_client:
            raise HTTPException(status_code=400, detail="WordPress n√£o configurado")
        
        tags = manager.wp_client.get_tags()
        
        return {
            "success": True,
            "tags": tags,
            "count": len(tags)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar tags: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/config", response_class=HTMLResponse)
async def config_page():
    """P√°gina principal de configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        if templates:
            return templates.TemplateResponse("config.html", {"request": {}})
        else:
            # HTML b√°sico caso templates n√£o estejam dispon√≠veis
            with open("templates/config.html", "r", encoding="utf-8") as f:
                html_content = f.read()
            return HTMLResponse(html_content)
    except Exception as e:
        logger.error(f"‚ùå Erro ao carregar p√°gina de config: {e}")
        raise HTTPException(status_code=500, detail="Erro ao carregar p√°gina")

@app.get("/config/data")
async def get_config_data():
    """Obter todas as configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        
        return {
            "success": True,
            "configurations": manager.get_all_configs(),
            "monitored_urls": manager.get_monitored_urls(active_only=False),
            "content_templates": manager.get_content_templates(active_only=False)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter dados de config: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/config/update")
async def update_config(request: ConfigUpdateRequest):
    """Atualizar configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        # Validar se h√° configura√ß√µes para atualizar
        if not request.configurations:
            raise HTTPException(status_code=400, detail="Nenhuma configura√ß√£o fornecida para atualiza√ß√£o")
        
        manager = ConfigManager()
        manager.update_configs(request.configurations)
        
        return {
            "success": True,
            "message": "Configura√ß√µes atualizadas com sucesso"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar configura√ß√µes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/config/export")
async def export_config():
    """Exportar configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        export_data = manager.export_config()
        
        return export_data
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao exportar configura√ß√µes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/config/import")
async def import_config(config_data: dict, overwrite: bool = False):
    """Importar configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        manager.import_config(config_data, overwrite=overwrite)
        
        return {
            "success": True,
            "message": "Configura√ß√µes importadas com sucesso"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar configura√ß√µes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/config/backup")
async def create_config_backup():
    """Criar backup das configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        backup_name = manager.create_backup()
        
        return {
            "success": True,
            "backup_name": backup_name,
            "message": f"Backup '{backup_name}' criado com sucesso"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar backup: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/config/stats")
async def get_config_stats():
    """Obter estat√≠sticas das configura√ß√µes"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        stats = manager.get_statistics()
        
        return {
            "success": True,
            "statistics": stats
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/config/urls/add")
async def add_monitored_url(request: URLAddRequest):
    """Adicionar URL monitorada"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        manager.add_monitored_url(
            category=request.category,
            name=request.name,
            url=request.url,
            priority=request.priority
        )
        
        return {
            "success": True,
            "message": "URL adicionada com sucesso"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao adicionar URL: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/config/urls/{url_id}")
async def remove_monitored_url(url_id: int):
    """Remover URL monitorada"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        manager.remove_monitored_url(url_id)
        
        return {
            "success": True,
            "message": "URL removida com sucesso"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao remover URL: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/config/templates/add")
async def add_content_template(request: TemplateAddRequest):
    """Adicionar template de conte√∫do"""
    if not CONFIG_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo config n√£o dispon√≠vel")
    
    try:
        manager = ConfigManager()
        manager.add_content_template(
            template_name=request.template_name,
            product_type=request.product_type,
            title_template=request.title_template,
            content_template=request.content_template,
            meta_description_template=request.meta_description_template,
            keywords_template=request.keywords_template
        )
        
        return {
            "success": True,
            "message": "Template adicionado com sucesso"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao adicionar template: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/debug/env")
async def debug_env():
    """Debug das vari√°veis de ambiente (remover em produ√ß√£o)"""
    api_key = os.getenv('OPENAI_API_KEY')
    return {
        "openai_key_exists": bool(api_key),
        "openai_key_length": len(api_key) if api_key else 0,
        "openai_key_preview": f"{api_key[:10]}..." if api_key else "None",
        "working_directory": os.getcwd(),
        "env_files_exist": {
            ".env": os.path.exists(".env"),
            "../.env": os.path.exists("../.env")
        }
    }


# =====================================================
# ROTAS DO M√ìDULO SCHEDULER
# =====================================================

@app.get("/scheduler")
async def scheduler_status():
    """Status detalhado do m√≥dulo de agendamento"""
    if not SCHEDULER_AVAILABLE:
        return {
            "module": "scheduler",
            "status": "not_available",
            "message": "M√≥dulo scheduler n√£o foi importado corretamente",
            "dependencies": ["APScheduler"]
        }
    
    if 'scheduler_manager' not in globals():
        return {
            "module": "scheduler",
            "status": "not_initialized",
            "message": "Scheduler manager n√£o foi inicializado"
        }
    
    try:
        status_data = scheduler_manager.get_status()
        next_executions = scheduler_manager.get_next_executions(24)
        
        return {
            "module": "scheduler",
            "status": "operational" if status_data.get("is_running") else "stopped",
            "description": "M√≥dulo para agendamento autom√°tico de tarefas",
            "data": status_data,
            "next_24h": next_executions,
            "actions": {
                "get_status": "/scheduler/status",
                "run_manual": "/scheduler/run",
                "pause": "/scheduler/pause",
                "resume": "/scheduler/resume",
                "next_executions": "/scheduler/next"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do scheduler: {e}")
        return {
            "module": "scheduler",
            "status": "error",
            "message": str(e)
        }

@app.get("/scheduler/status")
async def get_scheduler_status():
    """Retorna status detalhado do scheduler"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        return scheduler_manager.get_status()
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter status do scheduler: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/scheduler/run")
async def run_scheduler_job_get(request: JobExecutionRequest = None):
    """Executa job do scheduler (GET)"""
    return await run_scheduler_job(request)

@app.post("/scheduler/run")
async def run_scheduler_job(request: JobExecutionRequest = None):
    """Executa job espec√≠fico ou fluxo completo se n√£o especificado"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        # Se nenhum job_id for especificado, executar fluxo completo
        if not request or not hasattr(request, 'job_id') or not request.job_id:
            logger.info("üöÄ Executando fluxo completo automaticamente")
            result = scheduler_manager.run_complete_workflow()
            return {
                "success": True,
                "action": "complete_workflow", 
                "result": result,
                "message": "Fluxo completo executado com sucesso! Verifique a √°rea de revis√£o para os novos artigos.",
                "redirect_to": "/review"
            }
        
        # Caso contr√°rio, executar job espec√≠fico
        result = scheduler_manager.run_job_manually(request.job_id)
        return {
            "success": True,
            "action": "specific_job",
            "result": result,
            "message": f"Job {request.job_id} executado com sucesso!"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao executar scheduler: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/scheduler/pause")
async def pause_scheduler():
    """Pausa todos os jobs do scheduler"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        result = scheduler_manager.pause()
        return result
    except Exception as e:
        logger.error(f"‚ùå Erro ao pausar scheduler: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/scheduler/resume")
async def resume_scheduler():
    """Resume todos os jobs do scheduler"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        result = scheduler_manager.resume()
        return result
    except Exception as e:
        logger.error(f"‚ùå Erro ao resumir scheduler: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/scheduler/next")
async def get_next_executions(hours: int = 24):
    """Retorna pr√≥ximas execu√ß√µes nas pr√≥ximas X horas"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        executions = scheduler_manager.get_next_executions(hours)
        return {
            "next_executions": executions,
            "period_hours": hours,
            "count": len(executions)
        }
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter pr√≥ximas execu√ß√µes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/scheduler/history")
async def get_scheduler_history():
    """Retorna hist√≥rico de execu√ß√µes"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        status = scheduler_manager.get_status()
        return {
            "recent_executions": status.get("recent_executions", []),
            "count": len(status.get("recent_executions", []))
        }
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter hist√≥rico: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/scheduler/progress")
async def get_workflow_progress():
    """Retorna o progresso atual do fluxo de trabalho"""
    if not SCHEDULER_AVAILABLE or 'scheduler_manager' not in globals():
        raise HTTPException(status_code=503, detail="M√≥dulo scheduler n√£o dispon√≠vel")
    
    try:
        # Verificar o status atual do sistema
        status = {}
        
        # Verificar scraper
        if SCRAPER_AVAILABLE:
            try:
                scraper_manager = ScraperManager()
                scraper_data = scraper_manager.get_scraping_status()
                status['scraper'] = {
                    'running': scraper_data.get('is_running', False),
                    'progress': scraper_data.get('progress_percentage', 0),
                    'message': scraper_data.get('status_message', 'Aguardando...')
                }
            except:
                status['scraper'] = {'running': False, 'progress': 0, 'message': 'Inativo'}
        
        # Verificar generator
        if GENERATOR_AVAILABLE:
            try:
                gen_manager = GeneratorManager()
                gen_stats = gen_manager.get_stats()
                status['generator'] = {
                    'running': gen_stats.get('is_processing', False),
                    'progress': gen_stats.get('progress_percentage', 0),
                    'message': gen_stats.get('status_message', 'Aguardando...')
                }
            except:
                status['generator'] = {'running': False, 'progress': 0, 'message': 'Inativo'}
        
        # Verificar hist√≥rico recente do scheduler
        scheduler_status = scheduler_manager.get_status()
        recent_executions = scheduler_status.get('recent_executions', [])
        
        # Determinar status geral
        overall_status = 'idle'
        if any(s.get('running', False) for s in status.values()):
            overall_status = 'running'
        
        return {
            'status': overall_status,
            'modules': status,
            'recent_executions': recent_executions[:3],  # √öltimas 3 execu√ß√µes
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter progresso: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =====================================================
# ROTAS DE INTERFACE VISUAL
# =====================================================

@app.get("/interface/scraper", response_class=HTMLResponse)
async def scraper_interface():
    """Interface visual para o m√≥dulo Scraper"""
    if not SCRAPER_AVAILABLE:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå M√≥dulo Scraper Indispon√≠vel</h1>
        <p>O m√≥dulo de scraping n√£o est√° dispon√≠vel.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    
    try:
        with open("templates/scraper_interface.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(html_content)
        
    except FileNotFoundError:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå Template n√£o encontrado</h1>
        <p>O arquivo de template n√£o foi encontrado.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    except Exception as e:
        logger.error(f"Erro na interface do scraper: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@app.get("/interface/generator", response_class=HTMLResponse)
async def generator_interface():
    """Interface visual para o m√≥dulo Generator"""
    if not GENERATOR_AVAILABLE:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå M√≥dulo Generator Indispon√≠vel</h1>
        <p>O m√≥dulo de gera√ß√£o n√£o est√° dispon√≠vel.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    
    try:
        with open("templates/generator_interface.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(html_content)
        
    except FileNotFoundError:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå Template n√£o encontrado</h1>
        <p>O arquivo de template n√£o foi encontrado.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    except Exception as e:
        logger.error(f"Erro na interface do generator: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@app.get("/interface/publisher", response_class=HTMLResponse)
async def publisher_interface():
    """Interface visual para o m√≥dulo Publisher"""
    if not PUBLISHER_AVAILABLE:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå M√≥dulo Publisher Indispon√≠vel</h1>
        <p>O m√≥dulo de publica√ß√£o n√£o est√° dispon√≠vel.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    
    try:
        with open("templates/publisher_interface.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(html_content)
        
    except FileNotFoundError:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå Template n√£o encontrado</h1>
        <p>O arquivo de template n√£o foi encontrado.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    except Exception as e:
        logger.error(f"Erro na interface do publisher: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@app.get("/interface/scheduler", response_class=HTMLResponse)
async def scheduler_interface():
    """Interface visual para o m√≥dulo Scheduler"""
    if not SCHEDULER_AVAILABLE:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå M√≥dulo Scheduler Indispon√≠vel</h1>
        <p>O m√≥dulo de agendamento n√£o est√° dispon√≠vel.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    
    try:
        with open("templates/scheduler_interface.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(html_content)
        
    except FileNotFoundError:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå Template n√£o encontrado</h1>
        <p>O arquivo de template n√£o foi encontrado.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    except Exception as e:
        logger.error(f"Erro na interface do scheduler: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@app.get("/interface/review", response_class=HTMLResponse)
async def review_interface():
    """Interface visual para o m√≥dulo Review"""
    if not REVIEW_AVAILABLE:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå M√≥dulo Review Indispon√≠vel</h1>
        <p>O m√≥dulo de revis√£o n√£o est√° dispon√≠vel.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    
    try:
        with open("templates/review_interface.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(html_content)
        
    except FileNotFoundError:
        return HTMLResponse("""
        <html><body style="text-align:center; font-family: Arial; padding: 50px; background: #0a0a0a; color: white;">
        <h1>‚ùå Template n√£o encontrado</h1>
        <p>O arquivo de template n√£o foi encontrado.</p>
        <a href="/" style="color: #007aff;">‚Üê Voltar ao Dashboard</a>
        </body></html>
        """)
    except Exception as e:
        logger.error(f"Erro na interface do review: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


@app.get("/interface/config", response_class=HTMLResponse)
async def config_interface():
    """Interface visual para o m√≥dulo Config"""
    try:
        # Servir interface de configura√ß√£o (reutilizar a p√°gina de config existente)
        return RedirectResponse(url="/config", status_code=302)
        
    except Exception as e:
        logger.error(f"Erro na interface de config: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno: {str(e)}")


# =====================================================
# TRATAMENTO DE ERROS
# =====================================================

@app.exception_handler(404)
async def not_found_handler(request, exc):
    """Tratamento de p√°ginas n√£o encontradas"""
    return HTMLResponse(
        content="""
        <html>
            <body style="font-family: Arial; text-align: center; margin-top: 50px;">
                <h1>404 - P√°gina n√£o encontrada</h1>
                <p>A p√°gina que voc√™ procura n√£o existe.</p>
                <a href="/">Voltar ao Dashboard</a>
            </body>
        </html>
        """,
        status_code=404
    )


@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """Tratamento de erros internos"""
    logger.error(f"Erro interno: {exc}")
    return HTMLResponse(
        content="""
        <html>
            <body style="font-family: Arial; text-align: center; margin-top: 50px;">
                <h1>500 - Erro interno do servidor</h1>
                <p>Ocorreu um erro interno. Verifique os logs.</p>
                <a href="/">Voltar ao Dashboard</a>
            </body>
        </html>
        """,
        status_code=500
    )

@app.get("/test_status.html", response_class=HTMLResponse)
async def test_status_page():
    """P√°gina de teste para verificar status do sistema"""
    try:
        with open("test_status.html", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Arquivo de teste n√£o encontrado")

@app.get("/test_generator_stats.html", response_class=HTMLResponse)
async def test_generator_stats_page():
    """P√°gina de teste para verificar estat√≠sticas do generator"""
    try:
        with open("test_generator_stats.html", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Arquivo de teste n√£o encontrado")


# =====================================================
# WEEKLY ARCHIVE ENDPOINTS - Sistema de Arquivos Semanais
# =====================================================

@app.get("/archive")
async def archive_status():
    """Status do sistema de arquivos semanais"""
    try:
        from src.review.weekly_archive import WeeklyArchiveManager
        archive_manager = WeeklyArchiveManager()
        
        stats = archive_manager.get_statistics()
        current_week = archive_manager.get_current_week_info()
        
        return {
            "module": "weekly_archive",
            "status": "ready",
            "description": "Sistema de arquivamento semanal de artigos",
            "data": {
                "current_week": f"{current_week['year']}-W{current_week['week_number']:02d}",
                "current_week_range": f"{current_week['start_date']} a {current_week['end_date']}",
                **stats
            }
        }
    except Exception as e:
        logger.error(f"‚ùå Erro no status do archive: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/archive/sessions")
async def get_weekly_sessions(limit: int = 10):
    """Lista de sess√µes semanais arquivadas"""
    try:
        from src.review.weekly_archive import WeeklyArchiveManager
        archive_manager = WeeklyArchiveManager()
        
        sessions = archive_manager.get_weekly_sessions(limit=limit)
        
        return {
            "success": True,
            "sessions": sessions,
            "total": len(sessions)
        }
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter sess√µes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/archive/sessions/{session_id}/articles")
async def get_session_articles(session_id: int):
    """Artigos de uma sess√£o semanal espec√≠fica"""
    try:
        from src.review.weekly_archive import WeeklyArchiveManager
        archive_manager = WeeklyArchiveManager()
        
        articles = archive_manager.get_articles_from_week(session_id)
        
        return {
            "success": True,
            "articles": articles,
            "total": len(articles),
            "session_id": session_id
        }
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter artigos da sess√£o: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/archive/articles/{article_id}/restore")
async def restore_archived_article(article_id: int):
    """Restaura um artigo arquivado para o sistema de revis√£o"""
    try:
        from src.review.weekly_archive import WeeklyArchiveManager
        archive_manager = WeeklyArchiveManager()
        
        result = archive_manager.restore_article_to_review(article_id)
        
        if result['status'] == 'success':
            return result
        else:
            raise HTTPException(status_code=400, detail=result['message'])
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao restaurar artigo: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/archive/run")
async def run_weekly_archive():
    """Executa arquivamento manual da semana anterior"""
    try:
        from src.review.weekly_archive import WeeklyArchiveManager
        archive_manager = WeeklyArchiveManager()
        
        result = archive_manager.archive_previous_week_articles()
        
        return {
            "success": result['status'] == 'success',
            "result": result
        }
    except Exception as e:
        logger.error(f"‚ùå Erro no arquivamento: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/archive/interface", response_class=HTMLResponse)
async def archive_interface():
    """Interface web para gerenciar arquivos semanais"""
    try:
        with open("templates/archive_interface.html", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Interface n√£o encontrada")

@app.get("/publisher/test")
async def test_wordpress_connection_get():
    """Testa conex√£o com WordPress (GET)"""
    return await test_wordpress_connection()

@app.post("/publisher/test")
async def test_wordpress_connection():
    """Testa conex√£o com WordPress"""
    if not PUBLISHER_AVAILABLE:
        raise HTTPException(status_code=503, detail="M√≥dulo publisher n√£o dispon√≠vel")
    
    try:
        manager = PublicationManager()
        result = manager.test_wordpress_connection()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro no teste WordPress: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# =====================================================
# PONTO DE ENTRADA
# =====================================================

if __name__ == "__main__":
    import uvicorn
    
    logger.info(f"üöÄ Iniciando servidor FastAPI na porta {PORT}")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=PORT,
        reload=True,
        log_level="info"
    ) 
 
 